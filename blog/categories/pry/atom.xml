<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pry | Rails on Maui]]></title>
  <link href="http://www.railsonmaui.com//blog/categories/pry/atom.xml" rel="self"/>
  <link href="http://www.railsonmaui.com//"/>
  <updated>2015-10-26T14:09:56-07:00</updated>
  <id>http://www.railsonmaui.com//</id>
  <author>
    <name><![CDATA[Justin Gordon]]></name>
    <email><![CDATA[justin@railsonmaui.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pry, Ruby, Array#zip, CSV, and the Hash[] constructor]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/09/15/pry-ruby-array-zip-csv-and-the-hash-constructor/"/>
    <updated>2014-09-15T14:06:17-07:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/09/15/pry-ruby-array-zip-csv-and-the-hash-constructor</id>
    <content type="html"><![CDATA[<p>
A couple weeks ago, I wrote a popular article, <a href="http://www.railsonmaui.com/blog/2014/08/17/pry-ruby-and-fun-with-the-hash-constructor/">Pry, Ruby, and Fun With the Hash Constructor</a> demonstrating the usefulness of
<a href="https://github.com/pry/pry">pry</a> with the <a href="http://ruby-doc.org/core-2.1.2/Hash.html">Hash bracket constructor</a>. I just ran into a super fun test example of pry
that I couldn&#8217;t resist sharing!
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">The Task: Convert CSV File without Headers to Array of Hashes</h2>
<div class="outline-text-2" id="text-1">
<p>
For example, you want to take a csv file like:
</p>

<pre class="example">
|---+--------+--------|
| 1 | Justin | Gordon |
| 2 | Tender | Love   |
|---+--------+--------|
</pre>

<p>
And create an array of hashes like this with column headers &#8220;id&#8221;, &#8220;first_name&#8221;, &#8220;last_name&#8221;:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
You&#8217;d think that you could just pass the headers to the <code>CSV.parse</code>, but that
doesn&#8217;t work:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">11</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">col_headers</span> <span class="o">=</span> <span class="sx">%w(id, first_name last_name)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;id,&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;first_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="n">output</span> <span class="ss">error</span><span class="p">:</span> <span class="c1">#&lt;NoMethodError: undefined method `table&#39; for #&lt;Object:0x007fdbfc8d5588&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<!-- more -->
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Using Array#zip</h2>
<div class="outline-text-2" id="text-2">
<p>
I stumbled upon a note about the CSV parser that suggested using <code>Array#zip</code> to
add keys to the results created by the CSV parser when headers don&#8217;t exist in
the file.
</p>

<p>
Using <code>Array#zip</code>? What the heck is the <code>zip</code> method? Compression?
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="p">?</span> <span class="n">a_array</span><span class="o">.</span><span class="n">zip</span>
</span><span class='line'>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">c</span> <span class="p">(</span><span class="n">C</span> <span class="no">Method</span><span class="p">):</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="ss">Signature</span><span class="p">:</span> <span class="n">zip</span><span class="p">(</span><span class="o">*</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">17</span>
</span><span class='line'>
</span><span class='line'><span class="no">Converts</span> <span class="n">any</span> <span class="n">arguments</span> <span class="n">to</span> <span class="n">arrays</span><span class="p">,</span> <span class="k">then</span> <span class="n">merges</span> <span class="n">elements</span> <span class="n">of</span> <span class="nb">self</span> <span class="n">with</span>
</span><span class='line'><span class="n">corresponding</span> <span class="n">elements</span> <span class="n">from</span> <span class="n">each</span> <span class="n">argument</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">This</span> <span class="n">generates</span> <span class="n">a</span> <span class="n">sequence</span> <span class="n">of</span> <span class="n">ary</span><span class="o">.</span><span class="n">size</span> <span class="n">_n_</span><span class="o">-</span><span class="n">element</span> <span class="n">arrays</span><span class="p">,</span>
</span><span class='line'><span class="n">where</span> <span class="n">_n_</span> <span class="n">is</span> <span class="n">one</span> <span class="n">more</span> <span class="n">than</span> <span class="n">the</span> <span class="n">count</span> <span class="n">of</span> <span class="n">arguments</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">If</span> <span class="n">the</span> <span class="n">size</span> <span class="n">of</span> <span class="n">any</span> <span class="n">argument</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="n">the</span> <span class="n">size</span> <span class="n">of</span> <span class="n">the</span> <span class="n">initial</span> <span class="n">array</span><span class="p">,</span>
</span><span class='line'><span class="kp">nil</span> <span class="n">values</span> <span class="n">are</span> <span class="n">supplied</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">If</span> <span class="n">a</span> <span class="n">block</span> <span class="n">is</span> <span class="n">given</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">invoked</span> <span class="k">for</span> <span class="n">each</span> <span class="n">output</span> <span class="n">array</span><span class="p">,</span> <span class="n">otherwise</span> <span class="n">an</span>
</span><span class='line'><span class="n">array</span> <span class="n">of</span> <span class="n">arrays</span> <span class="n">is</span> <span class="n">returned</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">a</span> <span class="o">=</span> <span class="o">[</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span> <span class="o">]</span>
</span><span class='line'>   <span class="n">b</span> <span class="o">=</span> <span class="o">[</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span> <span class="o">]</span>
</span><span class='line'>   <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>   <span class="c1">#=&gt; [[1, 4, 7], [2, 5, 8], [3, 6, 9]]</span>
</span><span class='line'>   <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>      <span class="c1">#=&gt; [[1, 4, 7], [2, 5, 8]]</span>
</span><span class='line'>   <span class="n">a</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">8</span><span class="o">]</span><span class="p">)</span>    <span class="c1">#=&gt; [[4, 1, 8], [5, 2, nil], [6, nil, nil]]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Hmmmm&#x2026;.Why would that be useful?
</p>

<p>
Here&#8217;s some pry command that demonstrate this. I encourage you to follow along
in pry!
</p>

<p>
I first created a CSV string from hand like this:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv_file</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">CSV</span>
</span><span class='line'><span class="err">[2] (pry) main: 0* 1, &quot;Justin&quot;, &quot;Gordon&quot;</span>
</span><span class='line'><span class="err">[2] (pry) main: 0* 2, &quot;Avdi&quot;, &quot;Grimm&quot;</span>
</span><span class='line'><span class="err">[2] (pry) main: 0* CSV</span>
</span><span class='line'><span class="err">&quot;1, \&quot;Justin\&quot;, \&quot;Gordon\&quot;\n2, \&quot;Avdi\&quot;, \&quot;Grimm\&quot;\n&quot;</span>
</span><span class='line'><span class="err">[3] (pry) main: 0&gt; CSV.parse(csv_file) { |csv_row| p csv_row }</span>
</span><span class='line'><span class="err">CSV::MalformedCSVError: Illegal quoting in line 1.</span>
</span><span class='line'><span class="err">from /Users/justin/.rvm/rubies/ruby-2.1.2/lib/ruby/2.1.0/csv.rb:1855:in `block (2 levels) in shift&#39;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;Avdi&quot;</span><span class="p">,</span> <span class="s2">&quot;Grimm&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="no">CSV</span>
</span><span class='line'><span class="s2">&quot;1, </span><span class="se">\&quot;</span><span class="s2">Justin</span><span class="se">\&quot;</span><span class="s2">, </span><span class="se">\&quot;</span><span class="s2">Gordon</span><span class="se">\&quot;\n</span><span class="s2">2, </span><span class="se">\&quot;</span><span class="s2">Avdi</span><span class="se">\&quot;</span><span class="s2">, </span><span class="se">\&quot;</span><span class="s2">Grimm</span><span class="se">\&quot;\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">csv_row</span><span class="o">|</span> <span class="nb">p</span> <span class="n">csv_row</span> <span class="p">}</span>
</span><span class='line'><span class="ss">CSV</span><span class="p">:</span><span class="ss">:MalformedCSVError</span><span class="p">:</span> <span class="no">Illegal</span> <span class="n">quoting</span> <span class="k">in</span> <span class="n">line</span> <span class="mi">1</span><span class="o">.</span>
</span><span class='line'><span class="n">from</span> <span class="sr">/Users/</span><span class="n">justin</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">csv</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">1855</span><span class="ss">:in</span> <span class="sb">`block (2 levels) in shift&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Doooh!!!! That taught me that creating a legit CSV string is not as easy as it sounds.
</p>

<p>
Let&#8217;s create a legit csv string:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv_string</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">generate</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span>   <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span> <span class="s2">&quot;Gordon&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span>   <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span> <span class="s2">&quot;Love&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="s2">&quot;1,Justin,Gordon</span><span class="se">\n</span><span class="s2">2,Tender,Love</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Notice, there&#8217;s no quotes around the single word names!
</p>

<p>
If I use CSV to parse this, we get the reverse result, the array of arrays,
back:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">17</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="nb">Array</span> <span class="o">&lt;</span> <span class="no">Object</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Ahh&#x2026;Could we use the Hash[] constructor to convert these arrays into Hashes
that place the proper keys?
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">18</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">first_row</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">19</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">col_headers</span> <span class="o">=</span> <span class="sx">%w(id, first_name last_name)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;id,&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;first_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">20</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">first_row</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;id,&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;first_name&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">21</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">first_row</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">col_headers</span><span class="p">)</span> <span class="o">]</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>         <span class="s2">&quot;1&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;id,&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Justin&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;first_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Gordon&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Bingo!
</p>

<p>
Now, let&#8217;s fix the array of arrays, creating an array called <code>rows</code> 
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">22</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Then the grand finale!
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">24</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">rows</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">col_headers</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
And sure, you can do this all on one line by inlining the <code>rows</code> variable:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">col_headers</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Using headers option in CSV?</h2>
<div class="outline-text-2" id="text-3">
<p>
Well, you&#8217;d think that you could just pass the headers to the <code>CSV.parse</code>, but
that doesn&#8217;t work:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="n">output</span> <span class="ss">error</span><span class="p">:</span> <span class="c1">#&lt;NoMethodError: undefined method `table&#39; for #&lt;Object:0x007fdbfc8d5588&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Well, what&#8217;s the doc?
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">13</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="p">?</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span>
</span><span class='line'>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="sr">/Users/</span><span class="n">justin</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">csv</span><span class="o">.</span><span class="n">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">1278</span><span class="p">:</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:CSV&gt;</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="ss">Signature</span><span class="p">:</span> <span class="n">parse</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">11</span>
</span><span class='line'>
</span><span class='line'><span class="ss">:call</span><span class="o">-</span><span class="ss">seq</span><span class="p">:</span>
</span><span class='line'>  <span class="n">parse</span><span class="p">(</span> <span class="n">str</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">parse</span><span class="p">(</span> <span class="n">str</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">This</span> <span class="nb">method</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">easily</span> <span class="n">parse</span> <span class="no">CSV</span> <span class="n">out</span> <span class="n">of</span> <span class="n">a</span> <span class="nb">String</span><span class="o">.</span>  <span class="no">You</span> <span class="n">may</span> <span class="n">either</span>
</span><span class='line'><span class="n">provide</span> <span class="n">a</span> <span class="n">block</span> <span class="n">which</span> <span class="n">will</span> <span class="n">be</span> <span class="n">called</span> <span class="n">with</span> <span class="n">each</span> <span class="n">row</span> <span class="n">of</span> <span class="n">the</span> <span class="nb">String</span> <span class="k">in</span> <span class="n">turn</span><span class="p">,</span>
</span><span class='line'><span class="ow">or</span> <span class="n">just</span> <span class="n">use</span> <span class="n">the</span> <span class="n">returned</span> <span class="nb">Array</span> <span class="n">of</span> <span class="no">Arrays</span> <span class="p">(</span><span class="k">when</span> <span class="n">no</span> <span class="n">block</span> <span class="n">is</span> <span class="n">given</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">You</span> <span class="n">pass</span> <span class="n">your</span> <span class="n">str</span> <span class="n">to</span> <span class="n">read</span> <span class="n">from</span><span class="p">,</span> <span class="ow">and</span> <span class="n">an</span> <span class="n">optional</span> <span class="n">options</span> <span class="no">Hash</span> <span class="n">containing</span>
</span><span class='line'><span class="n">anything</span> <span class="ss">CSV</span><span class="p">:</span><span class="ss">:new</span><span class="p">()</span> <span class="n">understands</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Hmmm&#x2026;seems that passing the <code>headers</code> should have worked.
</p>

<p>
The <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/csv/rdoc/CSV.html#method-c-new">CSV docs clearly state</a> that the initialize method takes an option <code>:headers</code>
</p>

<blockquote>
<p>
:headers
If set to :first_row or true, the initial row of the CSV file will be treated as
a row of headers. If set to an Array, the contents will be used as the headers.
If set to a String, the String is run through a call of ::parse_line with the
same :col_sep, :row_sep, and :quote_char as this instance to produce an Array of
headers. This setting causes #shift to return rows as CSV::Row objects instead
of Arrays and #read to return CSV::Table objects instead of an Array of Arrays.
</p>
</blockquote>

<p>
So, what can we call on a new CSV object? Let&#8217;s list the methods.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">25</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="no">CSV</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="no">Enumerable</span><span class="c1">#methods:</span>
</span><span class='line'>  <span class="n">all?</span>            <span class="n">count</span>       <span class="n">each_entry</span>        <span class="n">find</span>        <span class="n">group_by</span>  <span class="n">map</span>      <span class="n">minmax</span>     <span class="n">reject</span>        <span class="n">sum</span>         <span class="n">to_table</span>
</span><span class='line'>  <span class="n">any?</span>            <span class="n">cycle</span>       <span class="n">each_slice</span>        <span class="n">find_all</span>    <span class="kp">include</span><span class="p">?</span>  <span class="n">max</span>      <span class="n">minmax_by</span>  <span class="n">reverse_each</span>  <span class="n">take</span>        <span class="n">to_text_table</span>
</span><span class='line'>  <span class="n">as_json</span>         <span class="n">detect</span>      <span class="n">each_with_index</span>   <span class="n">find_index</span>  <span class="n">index_by</span>  <span class="n">max_by</span>   <span class="n">none?</span>      <span class="nb">select</span>        <span class="n">take_while</span>  <span class="n">zip</span>
</span><span class='line'>  <span class="n">chunk</span>           <span class="n">drop</span>        <span class="n">each_with_object</span>  <span class="n">first</span>       <span class="n">inject</span>    <span class="n">member?</span>  <span class="n">one?</span>       <span class="n">slice_before</span>  <span class="nb">to_a</span>
</span><span class='line'>  <span class="n">collect</span>         <span class="n">drop_while</span>  <span class="n">entries</span>           <span class="n">flat_map</span>    <span class="n">lazy</span>      <span class="n">min</span>      <span class="n">partition</span>  <span class="n">sort</span>          <span class="n">to_h</span>
</span><span class='line'>  <span class="n">collect_concat</span>  <span class="n">each_cons</span>   <span class="n">exclude?</span>          <span class="n">grep</span>        <span class="n">many?</span>     <span class="n">min_by</span>   <span class="n">reduce</span>     <span class="n">sort_by</span>       <span class="n">to_set</span>
</span><span class='line'><span class="no">CSV</span><span class="c1">#methods:</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span>           <span class="n">col_sep</span>            <span class="n">fcntl</span>             <span class="n">header_convert</span>     <span class="n">lineno</span>      <span class="nb">readline</span>         <span class="n">skip_blanks?</span>  <span class="n">to_io</span>
</span><span class='line'>  <span class="n">add_row</span>      <span class="n">convert</span>            <span class="n">field_size_limit</span>  <span class="n">header_converters</span>  <span class="n">path</span>        <span class="nb">readlines</span>        <span class="n">skip_lines</span>    <span class="n">truncate</span>
</span><span class='line'>  <span class="n">binmode</span>      <span class="n">converters</span>         <span class="n">fileno</span>            <span class="n">header_row?</span>        <span class="n">pid</span>         <span class="n">reopen</span>           <span class="n">stat</span>          <span class="n">tty?</span>
</span><span class='line'>  <span class="n">binmode?</span>     <span class="n">each</span>               <span class="n">flock</span>             <span class="n">headers</span>            <span class="n">pos</span>         <span class="n">return_headers?</span>  <span class="n">string</span>        <span class="n">unconverted_fields?</span>
</span><span class='line'>  <span class="n">close</span>        <span class="n">encoding</span>           <span class="n">flush</span>             <span class="nb">inspect</span>            <span class="n">pos</span><span class="o">=</span>        <span class="n">rewind</span>           <span class="n">sync</span>          <span class="n">write_headers?</span>
</span><span class='line'>  <span class="n">close_read</span>   <span class="n">eof</span>                <span class="n">force_quotes?</span>     <span class="n">internal_encoding</span>  <span class="nb">puts</span>        <span class="n">row_sep</span>          <span class="n">sync</span><span class="o">=</span>
</span><span class='line'>  <span class="n">close_write</span>  <span class="n">eof?</span>               <span class="n">fsync</span>             <span class="n">ioctl</span>              <span class="n">quote_char</span>  <span class="n">seek</span>             <span class="n">tell</span>
</span><span class='line'>  <span class="n">closed?</span>      <span class="n">external_encoding</span>  <span class="nb">gets</span>              <span class="n">isatty</span>             <span class="n">read</span>        <span class="n">shift</span>            <span class="n">to_i</span>
</span><span class='line'><span class="n">instance</span> <span class="ss">variables</span><span class="p">:</span>
</span><span class='line'>  <span class="vi">@col_sep</span>     <span class="vi">@field_size_limit</span>   <span class="vi">@headers</span>  <span class="vi">@parsers</span>     <span class="vi">@re_chars</span>        <span class="vi">@row_sep</span>      <span class="vi">@unconverted_fields</span>
</span><span class='line'>  <span class="vi">@converters</span>  <span class="vi">@force_quotes</span>       <span class="vi">@io</span>       <span class="vi">@quote</span>       <span class="vi">@re_esc</span>          <span class="vi">@skip_blanks</span>  <span class="vi">@use_headers</span>
</span><span class='line'>  <span class="vi">@encoding</span>    <span class="vi">@header_converters</span>  <span class="vi">@lineno</span>   <span class="vi">@quote_char</span>  <span class="vi">@return_headers</span>  <span class="vi">@skip_lines</span>   <span class="vi">@write_headers</span>
</span></code></pre></td></tr></table></div></figure>

<p>
How about this:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">14</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#&lt;CSV::Row &quot;id,&quot;:&quot;1&quot; &quot;first_name&quot;:&quot;Justin&quot; &quot;last_name&quot;:&quot;Gordon&quot;&gt;,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#&lt;CSV::Row &quot;id,&quot;:&quot;2&quot; &quot;first_name&quot;:&quot;Tender&quot; &quot;last_name&quot;:&quot;Love&quot;&gt;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Well, that&#8217;s getting closer.
</p>

<p>
How about if I just map those rows with a <code>to_hash</code>?
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_hash</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Bingo!
</p>

<p>
I hope you enjoyed this!
</p>
</div>
</div>


<div id="discourse-comments"></div>


<script type="text/javascript">
  var discourseUrl = "http://forum.shakacode.com/",
      discourseEmbedUrl = "http://www.railsonmaui.com//blog/2014/09/15/pry-ruby-array-zip-csv-and-the-hash-constructor/";
  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
      d.src = discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pry, Ruby, and Fun with the Hash Constructor]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/08/17/pry-ruby-and-fun-with-the-hash-constructor/"/>
    <updated>2014-08-17T17:51:24-07:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/08/17/pry-ruby-and-fun-with-the-hash-constructor</id>
    <content type="html"><![CDATA[<p>
I recently had a chance to pair with <a href="https://twitter.com/searls">Justin Searls</a> of <a href="http://testdouble.com/">TestDouble</a>, and we got
to chatting about <a href="https://github.com/pry/pry">pry</a> and the odd <code>Hash[]</code> constructor. Here&#8217;s a few tips that you
might find useful.
</p>




<p>
The main reason I use pry are:
</p>


<ol class="org-ol">
<li>Testing Ruby syntax.
</li>
<li>Documentation and source code browsing.
</li>
<li>History support.
</li>
<li><code>cd</code> into the an object to change the context, and <code>ls</code> to list methods of
that object.
</li>
</ol>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Pry Configuration</h2>
<div class="outline-text-2" id="text-1">
<p>
To install pry with rails, place this in your <code>Gemfile</code>
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Then run <code>bundle install</code>. Then run <code>rails console</code>. That gets you the default
pry configuration. At the bottom of this article is my <code>~/.pryrc</code> (<a href="https://gist.github.com/justin808/1fe1dfbecc00a18e7f2a">gist</a>). Create
that file and then run <code>rails c</code> (short for <code>rails console</code>).
</p>

<!-- more -->

<p>
You&#8217;ll see this useful reminder of the customizations:
</p>

<pre class="example">
Helpful shortcuts:
h  : hist -T 20       Last 20 commands
hg : hist -T 20 -G    Up to 20 commands matching expression
hG : hist -G          Commands matching expression ever used
hr : hist -r          hist -r &lt;command number&gt; to run a command
Samples variables
a_array: [1, 2, 3, 4, 5, 6]
a_hash: { hello: "world", free: "of charge" }
</pre>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Testing syntax: Hash[]</h2>
<div class="outline-text-2" id="text-2">
<p>
The <code>Hash[]</code> method is one of the odder methods in Ruby, and oh-so-useful if
you&#8217;re doing map, reduce types of operations.
</p>

<p>
For example, how do you transform all the keys in a hash to be uppercase?
</p>

<p>
How about if we try this in pry (note, a_hash defined in my .pryrc).
</p>

<pre class="example">
[1] (pry) main: 0&gt; a_hash
{
    :hello =&gt; "world",
     :free =&gt; "of charge"
}
[2] (pry) main&gt; a_hash.map { |k,v| [k.to_s.upcase, v] }
[
    [0] [
        [0] "HELLO",
        [1] "world"
    ],
    [1] [
        [0] "FREE",
        [1] "of charge"
    ]
]
</pre>

<p>
OK, that gives us an Array of tuples.
</p>

<p>
Then run these two commands. <code>_</code> is the value of the last expression.
</p>

<pre class="example">
&gt; tmp = _
&gt; Hash[tmp]
{
    "HELLO" =&gt; "world",
     "FREE" =&gt; "of charge"
}
</pre>
<p>
Bingo! Now let&#8217;s dig into this a bit more.
</p>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Memoization with Hash</h2>
<div class="outline-text-2" id="text-3">
<p>
Hash has another unusual constructor useful for memoizing a method&#8217;s return
value when parameters are involved. Justin Weiss wrote a good article explaining
it: <a href="http://www.justinweiss.com/blog/2014/07/28/4-simple-memoization-patterns-in-ruby-and-one-gem/">4 Simple Memoization Patterns in Ruby (and One Gem)</a>.
</p>

<p>
Here&#8217;s a quick sample in Pry:
</p>
<pre class="example">
[5] (pry) main: 0&gt; hh = Hash.new { |h, k| h[k] = k * 2 }
{}
[6] (pry) main: 0&gt; hh[2]
4
[7] (pry) main: 0&gt; hh[4]
8
</pre>

<p>
You can even use an array for the key values:
</p>
<pre class="example">
[8] (pry) main: 0&gt; hh = Hash.new { |h, k| h[k] = k[0] * k[1] }
{}
[9] (pry) main: 0&gt; hh[[2,3]]
6
[10] (pry) main: 0&gt; hh[[4,5]]
20
</pre>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Browsing Documentation and Source</h2>
<div class="outline-text-2" id="text-4">
<p>
It&#8217;s super useful to be able to see the documentation for any method easily,
which you can do by the <code>?</code> command. Similarly, you can also see the source, by
using <code>$</code>.
</p>

<pre class="example">
[3] (pry) main&gt; ? Hash[]

From: hash.c (C Method):
Owner: #&lt;Class:Hash&gt;
Visibility: public
Signature: [](*arg1)
Number of lines: 12

Creates a new hash populated with the given objects.

Similar to the literal { _key_ =&gt; _value_, ... }. In the first
form, keys and values occur in pairs, so there must be an even number of
arguments.

The second and third form take a single argument which is either an array
of key-value pairs or an object convertible to a hash.

   Hash["a", 100, "b", 200]             #=&gt; {"a"=&gt;100, "b"=&gt;200}
   Hash[ [ ["a", 100], ["b", 200] ] ]   #=&gt; {"a"=&gt;100, "b"=&gt;200}
   Hash["a" =&gt; 100, "b" =&gt; 200]         #=&gt; {"a"=&gt;100, "b"=&gt;200}
</pre>

<p>
Hmmmm&#x2026;. <code>Hash[]</code> also takes a plain array. Let&#8217;s try that:
</p>

<pre class="example">
[16] (pry) main: 0&gt; a_array
[
    [0] 1,
    [1] 2,
    [2] 3,
    [3] 4,
    [4] 5,
    [5] 6
]
[17] (pry) main: 0&gt; Hash[*a_array]
{
    1 =&gt; 2,
    3 =&gt; 4,
    5 =&gt; 6
}
</pre>

<p>
Neat!
</p>

<p>
Also note that you can see instance methods by prefixing the method name with
<code>#</code> or using an actual instance, like this:
</p>
<pre class="example">
[19] (pry) main: 0&gt; ? Hash#keys

From: hash.c (C Method):
Owner: Hash
Visibility: public
Signature: keys()
Number of lines: 5

Returns a new array populated with the keys from this hash. See also
Hash#values.

   h = { "a" =&gt; 100, "b" =&gt; 200, "c" =&gt; 300, "d" =&gt; 400 }
   h.keys   #=&gt; ["a", "b", "c", "d"]
[20] (pry) main: 0&gt; ? a_hash.keys
</pre>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Browsing History</h2>
<div class="outline-text-2" id="text-5">
<p>
History expansion in pry is also nice. As mentioned above, my <code>.pryrc</code> has 4
history aliases.
</p>

<pre class="example">
h  : hist -T 20       Last 20 commands
hg : hist -T 20 -G    Up to 20 commands matching expression
hG : hist -G          Commands matching expression ever used
hr : hist -r          hist -r &lt;command number&gt; to run a command
</pre>

<p>
Let&#8217;s try those out. It&#8217;s import to note that the <code>-T</code> tails results after doing
the grep of the whole history. I.e., the <code>-T 20</code> strips the results down to the
last 20 that matched.
</p>

<p>
Show last 20 commands.
</p>
<pre class="example">
[10] (pry) main: 0&gt; h
1: a_hash
2: a_hash.map { |k,v| [key.upcase, v] }
3: a_hash.map { |k,v| [key.to_s.upcase, v] }
4: a_hash.map { |k,v| [k.upcase, v] }
5: a_hash.map { |k,v| [k.to_s.upcase, v] }
6: tmp = _
7: Hash[tmp]
8: ? Hash[]
9: $ Hash[]
</pre>

<p>
Grep all commands for upcase and show last 20 matches.
</p>
<pre class="example">
[11] (pry) main: 0&gt; hg upcase
2: a_hash.map { |k,v| [key.upcase, v] }
3: a_hash.map { |k,v| [key.to_s.upcase, v] }
4: a_hash.map { |k,v| [k.upcase, v] }
5: a_hash.map { |k,v| [k.to_s.upcase, v] }
</pre>

<p>
Grep all commands for upcase and show all. The history of my example is short so
below is the same as above. If the history were longer, as it typically will be,
then you might get pages of results!
</p>

<pre class="example">
[12] (pry) main: 0&gt; hG upcase
 2: a_hash.map { |k,v| [key.upcase, v] }
 3: a_hash.map { |k,v| [key.to_s.upcase, v] }
 4: a_hash.map { |k,v| [k.upcase, v] }
 5: a_hash.map { |k,v| [k.to_s.upcase, v] }
11: hg upcase
</pre>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">cd and ls within Pry</h2>
<div class="outline-text-2" id="text-6">
<p>
I love to use <code>cd</code> and <code>ls</code> in <code>pry</code>.
</p>

<ol class="org-ol">
<li><code>cd</code> changes the context of pry, a bit like the current directory in the
shell, except for Ruby objects. And classes are objects too!
</li>
<li><code>ls</code> lists methods available on an object, a bit like listing files in the
shell.
</li>
</ol>

<pre class="example">
[22] (pry) main: 0&gt; cd a_hash.keys
[26] (pry) main / #&lt;Array&gt;: 1&gt; length
2
[27] (pry) main / #&lt;Array&gt;: 1&gt; first
:hello
[28] (pry) main / #&lt;Array&gt;: 1&gt; last
:free
[29] (pry) main / #&lt;Array&gt;: 1&gt; ls
Enumerable#methods:
  all?  chunk           detect     each_entry  each_with_index   entries   find      flat_map  index_by  lazy   max     member?  min_by  minmax_by  one?           partition  slice_before  sum     to_table
  any?  collect_concat  each_cons  each_slice  each_with_object  exclude?  find_all  group_by  inject    many?  max_by  min      minmax  none?      original_grep  reduce     sort_by       to_set  to_text_table
JSON::Ext::Generator::GeneratorMethods::Array#methods: to_json_without_active_support_encoder
Statsample::VectorShorthands#methods: to_scale  to_vector
SimpleCov::ArrayMergeHelper#methods: merge_resultset
Array#methods:
  &amp;    []=      clear        cycle       drop_while        fill        frozen?       inspect  permutation         push                  reverse       select     slice!      third                          to_gsl_integration_qaws_table        to_qaws_table  unshift
  *    abbrev   collect      dclone      each              find_index  grep          join     place               rassoc                reverse!      select!    sort        to                             to_gsl_vector                        to_query       values_at
  +    append   collect!     deep_dup    each_index        first       hash          keep_if  pop                 recode_repeated       reverse_each  shelljoin  sort!       to_a                           to_gslv                              to_s           zip
  -    as_json  combination  delete      empty?            flatten     in_groups     last     prefix              reject                rindex        shift      sort_by!    to_ary                         to_gv                                to_sentence    |
  &lt;&lt;   assoc    compact      delete_at   eql?              flatten!    in_groups_of  length   prepend             reject!               rotate        shuffle    split       to_csv                         to_h                                 to_xml
  &lt;=&gt;  at       compact!     delete_eql  extract_options!  forty_two   include?      map      pretty_print        repeated_combination  rotate!       shuffle!   suffix      to_default_s                   to_json                              transpose
  ==   blank?   concat       delete_if   fetch             fourth      index         map!     pretty_print_cycle  repeated_permutation  sample        size       take        to_formatted_s                 to_json_with_active_support_encoder  uniq
  []   bsearch  count        drop        fifth             from        insert        pack     product             replace               second        slice      take_while  to_gsl_integration_qawo_table  to_param                             uniq!
self.methods: __pry__
locals: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_
</pre>
<p>
It&#8217;s worth noting that you can see the modules declaring the methods of the object.
</p>

<p>
To see more of what pry can do for you, simply type <code>help</code> at the command line.
</p>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">My ~/.pryrc file</h2>
<div class="outline-text-2" id="text-7">
<p>
Create a file in your home directory called <code>~/.pryrc</code>.
<div><script src='https://gist.github.com/1fe1dfbecc00a18e7f2a.js'></script>
<noscript><pre><code>## Useful Collections
def a_array
  (1..6).to_a
end

def a_hash
  {hello: &quot;world&quot;, free: &quot;of charge&quot;}
end

Pry.config.color = true
Pry.config.prompt = Pry::NAV_PROMPT

Pry.config.commands.alias_command &quot;h&quot;, &quot;hist -T 20&quot;, desc: &quot;Last 20 commands&quot;
Pry.config.commands.alias_command &quot;hg&quot;, &quot;hist -T 20 -G&quot;, desc: &quot;Up to 20 commands matching expression&quot;
Pry.config.commands.alias_command &quot;hG&quot;, &quot;hist -G&quot;, desc: &quot;Commands matching expression ever used&quot;
Pry.config.commands.alias_command &quot;hr&quot;, &quot;hist -r&quot;, desc: &quot;hist -r &lt;command number&gt; to run a command&quot;

begin
  require &#39;awesome_print&#39;
  # Pry.config.print = proc { |output, value| output.puts value.ai }
  AwesomePrint.pry!
rescue LoadError =&gt; err
  puts &quot;no awesome_print :(&quot;
end

my_hook = Pry::Hooks.new.add_hook(:before_session, :add_dirs_to_load_path) do
  # adds the directories /lib and /spec and /test directories to the path if they exist
  puts &quot;Added lib spec test dirs to load path&quot;
  dir = `pwd`.chomp
  %w(lib spec test).map{ |d| &quot;#{dir}/#{d}&quot; }.each { |p| $: &lt;&lt; p unless !File.exist?(p) || $:.include?(p) }
end 

my_hook.exec_hook(:before_session)

puts &quot;Loaded ~/.pryrc&quot; 
puts &quot;Helpful shortcuts:&quot;
puts &quot;h  : hist -T 20       Last 20 commands&quot;
puts &quot;hg : hist -T 20 -G    Up to 20 commands matching expression&quot;
puts &quot;hG : hist -G          Commands matching expression ever used&quot;
puts &quot;hr : hist -r          hist -r &lt;command number&gt; to run a command&quot;
puts &quot;Samples variables&quot;
puts &quot;a_array: [1, 2, 3, 4, 5, 6]&quot;
puts &quot;a_hash: { hello: \&quot;world\&quot;, free: \&quot;of charge\&quot; }&quot;
</code></pre></noscript></div>

</p>
</div>
</div>


<div id="discourse-comments"></div>


<script type="text/javascript">
  var discourseUrl = "http://forum.shakacode.com/",
      discourseEmbedUrl = "http://www.railsonmaui.com//blog/2014/08/17/pry-ruby-and-fun-with-the-hash-constructor/";
  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
      d.src = discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>

]]></content>
  </entry>
  
</feed>
