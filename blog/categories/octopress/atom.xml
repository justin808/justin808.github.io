<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: octopress | Rails on Maui]]></title>
  <link href="http://www.railsonmaui.com//blog/categories/octopress/atom.xml" rel="self"/>
  <link href="http://www.railsonmaui.com//"/>
  <updated>2020-04-04T16:16:53-03:00</updated>
  <id>http://www.railsonmaui.com//</id>
  <author>
    <name><![CDATA[Justin Gordon]]></name>
    <email><![CDATA[justin@railsonmaui.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Updating My Blog to Octopress with Jekyll 2 and Discourse for Comments]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/09/28/updating-to-jekyll-2-and-discourse-for-comments/"/>
    <updated>2014-09-28T03:24:49-03:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/09/28/updating-to-jekyll-2-and-discourse-for-comments</id>
    <content type="html"><![CDATA[<p>
This weekend I made the ambitious move to using <a href="http://www.discourse.org/">Discourse.org</a> for my blog and
also upgrading <a href="http://octopress.org/">Octopress</a> to the latest version which supports Jekyll 2.0. Here&#8217;s
my notes, so that you can evaluate if you want to do either of these, as well as
how to do this efficiently.
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Motivation</h2>
<div class="outline-text-2" id="text-1">
<p>
What motivated me to update Octopress? The main reason was that <a href="http://octopress.org/">Octopress</a>
finally got upgraded from a beta version of <a href="http://jekyllrb.com/">Jekyll</a> to Jekyll 2.x.
</p>

<p>
What motivated me to migrate comments to Discourse?
</p>
<ol class="org-ol">
<li>I already wanted to create a forum for my website, so integrating blog
comments seemed worth pursuing. This is what <a href="http://boingboing.net/page/1/">BoingBoing uses for its blog articles</a>.
Click on the &#8220;Discuss&#8221; link below any BoingBoing article and get taken to the Discourse
topic for that article.
</li>
<li>I wanted to be able to have more engaging conversations with my programmer
friends on the topics which I&#8217;m blogging about.
</li>
</ol>

<p>
What&#8217;s super cool about doing the conversion?
</p>

<ol class="org-ol">
<li>Discourse will automatically create topics for each of your blog posts. You
can see that here: <a href="http://forum.shakacode.com/category/blog">http://forum.shakacode.com/category/blog</a>
<img src="/images/2014-09-octopress-discourse/railsonmaui-imported-articles.jpg">
</li>

<li>Discourse can import the Disqus comments from your blog!

<p>
What this looks like on the blog, <a href="http://www.railsonmaui.com">http://www.railsonmaui.com</a>
<img src="/images/2014-09-octopress-discourse/railsonmaui-comments-blog.jpg">
</p>

<p>
What this looks like on the forum, <a href="http://forum.shakacode.com">http://forum.shakacode.com</a>:
<img src="/images/2014-09-octopress-discourse/railsonmaui-comments-blog.jpg">
</p>
</li>
</ol>

<!-- more -->
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Updating Octopress</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://www.google.com/search?q=updgrading+octopress&gws_rd=ssl#newwindow=1&q=upgrading+octopress">Googling for upgrading octopress</a> gave me <a href="http://www.railsonmaui.com/blog/2013/09/15/upgrading-octopress/">my own article</a> as the second match.
It&#8217;s always a great reason to blog and have your notes indexed by Google!
</p>

<p>
I ran into one difficult issue with the upgrade. The issue was the very
frustrating:
</p>
<pre class="example">
bin/ruby_executable_hooks:15: stack level too deep (SystemStackError)
</pre>

<p>
How did I solve the problem?
</p>

<p>
Naturally the first thing to do is to <a href="https://www.google.com/search?q=bin%252Fruby_executabl&gws_rd=ssl#newwindow=1&q=bin%252Fruby_executable_hooks%253A15%253A+stack+level+too+deep+(SystemStackError)">google the error message</a>. That was not
particularly helpful.
</p>

<p>
Since I assumed that this problem would be pretty specific to my Octopress site,
I guessed that the issue was related to a rogue Jekyll plugin.
</p>

<p>
I moved all my plugins that were not part of standard Octopress into a
<code>/plugins_removed</code> directory, and then added back my plugins one at a time. That
helped me narrow down the issue to the <code>jekyll_alias_generator</code> plugin, which
sets up redirects when you change the URL of a published blog articles.
</p>

<p>
Then I clicked on the Issues icon for the <a href="https://github.com/tsmango/jekyll_alias_generator/issues">jekyll_alias_generator</a> and searched
for <a href="https://github.com/tsmango/jekyll_alias_generator/issues?q=is%253Aopen+is%253Aissue+stack+level+too+deep">stack level too deep</a> and <b>BINGO!</b> 
</p>

<p>
And here&#8217;s the solution: <a href="https://github.com/tsmango/jekyll_alias_generator/issues/14">Stack level too deep error #14</a>, which is to replace
lines 73-75 in <code>alias_generator.rb</code> with this code:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="n">alias_index_path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">sections</span><span class="o">|</span>
</span><span class='line'>    <span class="vi">@site</span><span class="o">.</span><span class="n">static_files</span> <span class="o">&lt;&lt;</span> <span class="no">Jekyll</span><span class="o">::</span><span class="no">AliasFile</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@site</span><span class="p">,</span> <span class="vi">@site</span><span class="o">.</span><span class="n">dest</span><span class="p">,</span> <span class="n">alias_index_path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">sections</span> <span class="o">+</span> <span class="mi">1</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">),</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>
<i>Update: rather than using the AliasGenerator plugin, use: <a href="https://github.com/jekyll/jekyll-redirect-from">jekyll/jekyll-redirect-from</a></i> 
</p>

<p>
Another issue I hit was that I had a few template files that were using
</p>
<pre class="example">
layout: nil
</pre>

<p>
This results in errors like:
</p>
<pre class="example">
Build Warning: Layout 'nil' requested in atom.xml does not exist.
</pre>

<p>
This got changed in the recent version of Jekyll to use <code>null</code>, like this:
</p>
<pre class="example">
layout: null
</pre>

<p>
So grep your files for <code>layout: nil</code> and change those to <code>layout: null</code>.
</p>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Installing Discourse for Blog Comments</h2>
<div class="outline-text-2" id="text-3">
<p>
This is well described in the following articles. I&#8217;ll give you my specific
steps below.
</p>
<ol class="org-ol">
<li>Setting up discourse on Docker: <a href="https://github.com/discourse/discourse_docker">github: discourse/docker</a> and
<a href="https://github.com/discourse/discourse/blob/master/docs/INSTALL-digital-ocean.md">discourse/docs/INSTALL-digital-ocean.md</a>. You can probably do fine on a
$10/month plan. The trickiest parts is to be sure that you do every step very
carefully. It&#8217;s very easy to make one typo and to then slow the process down!
</li>
<li><a href="//eviltrout.com/2014/01/22/embedding-discourse.html">Embedding Discourse in Static Sites</a> is the primary source of information on
converting from Disqus to Discourse for your blog comments.
</li>
<li><a href="https://meta.discourse.org/t/discourse-plugin-for-static-site-generators-like-jekyll-or-octopress/7965/99">Discourse plugin for static site generators like Jekyll or Octopress</a>:
Specifics for Octopress and Jekyll. 
</li>
</ol>

<p>
Once you configure your Discourse site to import your blog articles, you&#8217;ll have
to wait a bit for the rake task to run. It&#8217;s great being able to kickstart the
content of the forum with one&#8217;s blog articles!
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Discourse Configuration</h3>
<div class="outline-text-3" id="text-3-1">
<p>
The configuration of Discourse for blogging is super easy.
</p>
<ol class="org-ol">
<li>Configure the following settings, taking note that:
<ol class="org-ol">
<li>The urls are to your blog and include the subdomain, like
      <code>www.railsonmaui.com</code>.
</li>
<li>The embeddable host <i>does not</i> include <code>http://</code>
</li>
<li>The feed polling URL <i>does</i> include <code>http://</code>
</li>
</ol>
<p>
<img src="/images/2014-09-octopress-discourse/discourse-setup.jpg">
</p>
</li>
<li>I added a category called &#8220;Blog&#8221;.
</li>
<li>I created a user called &#8220;disqus&#8221; for users not found in the Disqus comment
import.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Octopress Discourse Comments Setup</h3>
<div class="outline-text-3" id="text-3-2">
<ol class="org-ol">
<li>Remove or comment out your Disqus setup in your <code>/_config.yml</code> file:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Disqus Comments</span>
</span><span class='line'><span class="c1"># Removed as support for Discourse comments added</span>
</span><span class='line'><span class="c1"># disqus_short_name: railsonmaui</span>
</span><span class='line'><span class="c1"># disqus_show_comment_count: true</span>
</span></code></pre></td></tr></table></div></figure>
<p>
Note, I first commented it out, because I toggled this on and off as I was
ensuring that the comment migration worked correctly, and none were missed.
</p>
</li>
<li>Add the plugin contained in <a href="https://github.com/justin808/jekyll_discourse_comments/blob/support_blank_baseurl/discourse_comments.rb">discourse_comments.rb</a> to your <code>/plugins</code>
directory. This plugin will append a DIV to your posts like this:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='HTML'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;discourse-comments&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">discourseUrl</span> <span class="o">=</span> <span class="s2">&quot;#{@site.config[&#39;discourse_url&#39;]}&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">discourseEmbedUrl</span> <span class="o">=</span> <span class="s2">&quot;#{@site.config[&#39;url&#39;]}#{@site.config[&#39;baseurl&#39;]}#{url}&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">);</span> <span class="nx">d</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s1">&#39;text/javascript&#39;</span><span class="p">;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">async</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">d</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">discourseUrl</span> <span class="o">+</span> <span class="s1">&#39;javascripts/embed.js&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;head&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
<li>Note that the display of comments only works on your live website, due the
fact that the Discourse server checks the source of the request for the
comments (per the above image of the configuration).
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">Detailed instructions for importing your Disqus comments into Discourse</h3>
<div class="outline-text-3" id="text-3-3">
<p>
The following instructions will allow you to import the comments from Disqus,
along with creating associated users for those comments. This is a <b>GREAT</b> way
to kickstart the forum.
</p>
<ol class="org-ol">
<li>Download an XML backup of your Disqus comments by logging into your Disqus
dashboard. The URL is like <a href="https://youraccount.disqus.com/admin/discussions/">https://youraccount.disqus.com/admin/discussions/</a>.
</li>
<li>That should bring you to the Discussions tab. Then click the Export sub-tab.
It should look like this:
<img src="/images/2014-09-octopress-discourse/disqus-get-xml-backup.jpg">
You&#8217;ll have to wait a few minutes for the creation email. I then saved the
file to my <code>~/Downloads</code> directory.
</li>
<li>Ssh to your docker instance
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh root@XXX.XXX.XXX.XXX
</span></code></pre></td></tr></table></div></figure>
</li>
<li>Get into your docker instance.
<pre class="example">
root@forum:~# cd /var/discourse/
root@forum:/var/discourse# ./launcher ssh app
</pre>

<p>
You&#8217;ll see this message:
</p>
<pre class="example">
Welcome to Discourse Docker
Use: rails, rake or discourse to execute commands in production
</pre>
</li>
<li>Sudo to discourse:
<pre class="example">
root@forum:~# sudo -iu discourse
discourse@forum:~$ cd /var/www/discourse
discourse@forum:/var/www/discourse$ bundle exec thor list
</pre>
</li>
<li>Then you need to copy the XML file you downloaded from Disqus that contains
an archive of your comments. The easiest way to do this is to <code>scp</code> the file
from some place accessible on the Internet. What I did was to <code>scp</code> the file
from my local machine to my Digital Ocean machine, and then from my Digital
Ocean machine to the Docker container. Here&#8217;s an example:

<p>
On your local machine, with the XML file (XXX.XXX.XXX.XXX is the ip of your
droplet):
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>scp ~/Downloads/railsonmaui-disqus.xml root@XXX.XXX.XXX.XXX
</span></code></pre></td></tr></table></div></figure>

<p>
Then inside of your docker container:
</p>
<pre class="example">
discourse@forum:/var/www/discourse$ scp root@XXX.XXX.XXX.XXX:railsonmaui-disqus.xml .
</pre>

<p>
That puts the file <code>railsonmaui-disqus.xml</code> in the current directory.
</p>
</li>

<li>Run the thor command:
<pre class="example">
discourse@forum:/var/www/discourse$ bundle exec thor disqus:import --file=railsonmaui-disqus.xml --post-as=disqus --dry-run
/var/www/discourse/vendor/bundle/ruby/2.0.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:898:in `rescue in connect': FATAL:  database "discourse_development" does not exist (ActiveRecord::NoDatabaseError)
Run `$ bin/rake db:create db:migrate` to create your database
  from /var/www/discourse/vendor/bundle/ruby/2.0.0/gems/activerecord-4.1.6/lib/active_record/connection_adapters/postgresql_adapter.rb:888:in `connect'
</pre>

<p>
The problem is that we need to specify the environment, as is standard with
Rails apps:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>thor disqus:import --file<span class="o">=</span>railsonmaui-disqus.xml --post-as<span class="o">=</span>disqus --dry-run
</span></code></pre></td></tr></table></div></figure>

<p>
That command does the trick and gives you a nice message indicating what it
will do once you remove the <code>--dry-run</code> flag.
</p>
<pre class="example">
discourse@forum:/var/www/discourse$ RAILS_ENV=production bundle exec thor disqus:import --file=railsonmaui-disqus.xml --post-as=disqus --dry-run
Creating Favorite RubyMine Tips - Rails on Maui... (8 posts)
Creating Octopress Setup with Github, Org Mode, and LiveReload - Rails on Maui... (3 posts)
</pre>

<p>
Once you verify, run:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">RAILS_ENV</span><span class="o">=</span>production bundle <span class="nb">exec </span>thor disqus:import --file<span class="o">=</span>railsonmaui-disqus.xml --post-as<span class="o">=</span>disqus
</span></code></pre></td></tr></table></div></figure>

<p>
This creates the comments <i>and the users</i>. Creating the users surprised me
as I didn&#8217;t know that the Disqus export contained the users&#8217; email addresses.
<b>So this script ends up triggering activation emails to all those users!</b>
</p>
</li>
</ol>
</div>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Conclusion</h2>
<div class="outline-text-2" id="text-4">
<p>
<b>This is all pretty neat!</b> Not only did I get my new forum populated with some
content, but I also created users who commented on my posts in the past. I&#8217;m
hoping I can engage in more meaningful discussions regarding the technologies
that I blog about with my own forum. Please do <a href="http://forum.shakacode.com">sign-up for the forum</a> so you can
comment and receive periodic updates of what gets posted! Or just sign up when
you want to post a comment. :-)
</p>
</div>
</div>


<div id="discourse-comments"></div>


<script type="text/javascript">
  var discourseUrl = "http://forum.shakacode.com/",
      discourseEmbedUrl = "http://www.railsonmaui.com//blog/2014/09/28/updating-to-jekyll-2-and-discourse-for-comments/";
  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
      d.src = discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-Mode Octopress Setup v2]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/"/>
    <updated>2014-03-05T19:37:00-03:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2</id>
    <content type="html"><![CDATA[<p>
<i>Note: This is a refresh of my original post from April, 2013 to adjust for Emacs 24.3 and org-mode 8.2.x</i>
</p>




<p>
WordPress seemed like a good blogging platform, but it just didn&#8217;t feel right. I
spend all my day editing text files using vim key-bindings, and I love <a href="http://orgmode.org/">Org Mode</a>
for all non-coding writing. If you don&#8217;t know Org Mode, it&#8217;s like having
Markdown mode on steroids. You can have a numbered list in Markdown, but
org-mode lets you re-order the list, and that&#8217;s just the beginning. Editing blog
documents in the WordPress editor felt almost as bad as being told to use MS
Word. I found that ergonomics of Org Mode, including all the goodness of recent
versions of <a href="http://www.gnu.org/software/emacs/">Emacs</a>, including <a href="http://www.emacswiki.org/emacs/Evil">Evil</a> (Vim emulation), just made organization of
creative thoughts so much more enjoyable.
</p>




<p>
So I bit the bullet one weekend, and dove into <a href="http://octopress.org/">Octopress</a>, publishing my first
article, <a href="http://www.railsonmaui.com/blog/2013/04/27/octopress-setup-with-github-and-org-mode/">Octopress Setup with Github, Org Mode, and LiveReload</a>. The solution
presented in that article <a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a> stopped
working when I upgraded Emacs to 24.3 and org-mode to 8.2.x. Here&#8217;s a rehash of
my original article updated to the latest software versions as of March, 2014.
</p>




<p>
If you used to writing real web applications, rather than know the intricacies
of a giant monolithic blogging platform, then the <a href="http://octopress.org/docs/theme/template/">customization of Octopress</a>
seems so much more straightforward. This is so much more like the Unix
philosophy that so many of us love, which is small and modular, rather than
monolithic.
</p>




<!-- more -->




<p>
I like <a href="https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2012-04-30-custom-domain-with-octopress-and-github-pages.markdown">Rob Dodson&#8217;s summary</a> (noting Org Mode plus Emacs):
</p>




<ul class="org-ul">
<li><a href="http://octopress.org/">Octopress</a> is a blogging framework written by <a href="http://brandonmathis.com/">Brandon Mathis</a> (<a href="https://twitter.com/#!/imathis">@imathis</a>) which
sits on top of <a href="https://github.com/mojombo/jekyll">Jekyll</a>. Jekyll is a static site generator, meaning there&#8217;s no
database associated with your blog. Instead of writing everything in a WSYWIG
linked to MySQL (like Wordpress or Blogger) you produce text files using
Markdown which are then converted to static HTML. There are 3 huge benefits to
this approach. First, writing in Markdown (<b>org-mode</b> for me) is awesome. Once
you learn the syntax it&#8217;s incredibly fast and you don&#8217;t have to spend time
playing with a tiny little editor window just to add <i>some</i> <b>style</b> to your
posts. Second, writing in your favorite text editor is also awesome. I produce
everything in Sublime Text 2 (<b>Emacs</b> for me) and every day I discover new
tricks to make the process better. If you&#8217;ve ever had to write a blog post
using one of those horrible little TinyMCE editors you will appreciate this
feature. And lastly, static HTML is <b>fast</b>.
</li>
</ul>




<p>
This article should be useful for:
</p>


<ol class="org-ol">
<li>Any interest in using org-mode to publish to Octopress including some
reasons I use Org Mode (with Emacs).
</li>
<li>Some explanation of what Octopress and git are doing.
</li>
<li>Anybody curious about how using free github pages works to host Octopress.
</li>
</ol>




<p>
Incidentally, since my blog is hosted using github pages, the source code and
configuration I use to generate it can all be found <a href="https://github.com/justin808/justin808.github.io">here</a>. See the notes below on
the difference between the <code>source</code> and <code>master</code> branches.
</p>




<!-- more -->




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Basic setup</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/">Rob Dodson on Octopress</a>: Start off with these instructions from this posting
on April 30th, 2012. There are a few differences worth noting:
<ol class="org-ol">
<li>You should change the .rvmrc to a .ruby-version file
</li>
<li>Github recommends your deployment repository be named <code>yourname.github.io</code>,
not <code>yourname.github.com</code>.
</li>
<li>After you run <code>rake setup_github_pages</code> and before running <code>rake
      generate</code>, you should run <code>rake install</code>. If you forget, there&#8217;s a clear
message indicating this omission.
</li>
</ol>
</li>
<li>Customize <code>octopress/_config.yml</code>. The yaml file contains descriptions.
</li>
<li>Update the DNS to use your custom domain if you wish: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on
setting up a custom domain</a>
</li>
<li>At this point, you can create a post:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;my post name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Create a page:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span><span class="s2">&quot;my page name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Generate and deploy:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake gen_deploy
</span></code></pre></td></tr></table></div></figure>

<p>
Watch the site and regenerate when it changes:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake watch
</span></code></pre></td></tr></table></div></figure>

<p>
Preview the site in a web browser:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>

<p>
See all the available rake options:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake -T
</span></code></pre></td></tr></table></div></figure>

<p>
Save changes to source branch:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;save changes to source&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ol>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Some Perspectives on how Octopress Works</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Posts</h3>
<div class="outline-text-3" id="text-2-1">
<p>
<b>Posts</b> are created using the rake task <code>rake new_post["Post Title"]</code>. The key things about a post are:
</p>
<ol class="org-ol">
<li>File is located in =source/_posts.
</li>
<li>File has a header containing the meta-data for the post. The post URL and
date are determined by the by the <code>title</code> and <code>date</code> fields. If you want to
change the date of your post, then you change the meta-data. Changing the
file name is useful only for file navigation. Here&#8217;s a <a href="https://gist.github.com/justin808/5550381">gist for a rake task
to update the file names to match the metadata</a>.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Pages</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<b>Pages</b> are created using the rake task <code>rake new_page["Page Title"]</code>. The key
things about a page are:
</p>
<ol class="org-ol">
<li>Files are located in <code>source/page-title</code>
</li>
<li>File has a header containing the meta-data for the post.
</li>
</ol>

<p>
I use &#8220;Pages&#8221; for things like <a href="http://www.railsonmaui.com/about">my &#8220;about&#8221; page.</a>
</p>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">POW</h2>
<div class="outline-text-2" id="text-3">
<p>
POW allows you to point your browser to <code>http://octopress.dev</code> to see your local,
unpublished Octopress website. It&#8217;s very convenient to not have to remember to
run a local server, and it works great with LiveReload. Scroll to the bottom of
this link for details on <a href="http://octopress.org/docs/blogging/">POW</a>. The alternative to running POW is to run <code>rake
preview</code> and then point your browser at <code>http://0.0.0.0:4000</code> (or whatever port
you configured).
</p>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Automatically Generating the Site</h2>
<div class="outline-text-2" id="text-4">
<p>
Start a shell tab running this command: <code>rake generate &amp;&amp; rake watch</code>. Edit a
file in markdown or follow the instructions below to use org-mode.
</p>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Org-Mode</h2>
<div class="outline-text-2" id="text-5">
<p>
You can skip this section if you&#8217;re not interested in org-mode. However, it&#8217;s
super cool!
</p>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">Why org-mode for blog publishing?</h3>
<div class="outline-text-3" id="text-5-1">
<p>
<a href="http://orgmode.org/">Org-mode</a> offers quite a bit more than plain markdown. It&#8217;s quite the <b>hacker&#8217;s
delight</b> for note taking and authoring of blog articles. Down below I list a few
reasons why org-mode. Here&#8217;s a few org-mode features I love (Some are Emacs
ones):
</p>
<ol class="org-ol">
<li>All headers and list items can be reordered with minimal keystrokes (think
super powerful outliner).
</li>
<li>Numbered lists.
</li>
<li>Editable tables in text editor, with movable columns, movable rows.
</li>
<li>Ergonomics of insertion of URLs and images.
</li>
<li>Includes the basics of markdown, such as source code blocks and much more.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">Org-mode Integration</h3>
<div class="outline-text-3" id="text-5-2">
<p>
The <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a> plugin automates the process of converting an org-mode
document (<code>.org</code> file) in <code>source/org_posts</code> into a <code>.html</code> document in
<code>source/_posts</code>. Once the html document is saved in _posts, the <code>rake watch</code>
task picks up the change and deploys the file. <b>Neat!</b>
</p>

<p>
Here are the basic steps:
</p>
<ol class="org-ol">
<li>Install Emacs 24.3 and use the package manager to install org-mode and
   <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a>.
</li>
<li>See my Emacs configuration below.
</li>
<li>Note, there are two ways to use org-octopress. I do not use its features to
automate the setup of the directories. This automated setup does not provide
a way to have &#8220;pages&#8221;. As of March, 2014, you can only have &#8220;posts&#8221;. Instead,
my configuration below handles the mapping of directories.
</li>
<li><del>Images work fine.</del> Well, almost fine. The big gotcha is that the standard
inclusion of images in org-mode results in broken paths at deployment. The
workaround is to embed the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress syntax for an image</a>, and to place the
images under source/images. Note, you&#8217;ll want to be sure to use an absolute
path, or else your article might look OK on the home page, but might now work
in the postings directory. If I&#8217;m creating a document with many images, I&#8217;ll
group the images for that document in a sub-directory of images named like
the document. This is how it should look. The trick is to place the
octopress <code>img</code> directive within a HTML begin/end block.

<p>
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/org-mode-images.png">
</p>
</li>
<li><b>Links</b>: This is key thing to get right. It&#8217;s critical to understand the
issues links, or else you&#8217;ll have one of these issues:
<ol class="org-ol">
<li>Links work when you test your blog locally using <code>pow</code>, but not when you
go to your published website. This happens if you use a relative link from
blog articles, because blog articles sometimes appear on your home page
and sometimes under the <code>/blog</code> directory. You have to use your domain
address to link from blog articles to other articles on your blog.
</li>
<li>You&#8217;d like your local links to point to the correct local spot. You can do
this for links on static pages, but just not blog articles. Thus, for
non-blog articles, it&#8217;s preferable to use the <code>file:</code> relative path format
(just not <code>file:/</code> absolute path and not <code>file:~/</code>).
</li>
</ol>
<p>
<b>Here&#8217;s the rules:</b>
</p>

<p>
Links from static pages, relatively specified to other static pages and to
posts. Ensure that there&#8217;s no <code>/</code> immediately following <code>file:</code>. For example:
</p>
<pre class="example">
[[file:telecommuting.html][Why telecommuting works and how I maximize productivity]]
</pre>
<p>
Or if the link is one level under the current directory:
</p>
<pre class="example">
[[file:misc/telecommuting.html][Why telecommuting works and how I maximize productivity]]
</pre>
<p>
Links from a <i>page</i> to a <i>post</i> can use a relative link like this.
<i>Important: you must use the <code>YYYY/MM/DD/blog-title/index.html</code> format! and you must specify the article title.</i>
</p>
<pre class="example">
[[file:../blog/2013/04/27/octopress-setup-with-github-and-org-mode/index.html][Org-Mode Octopress Setup V2]]
</pre>
<p>
<b>However</b>, links from posts to other posts require an absolute URL using your
published domain name. The big gotcha is that blog posts sometimes are shown
on the home page and sometimes inside of the blog directory. To avoid
trouble, you need to follow a format as this example shows. It&#8217;s easiest to
copy the URL from the browser address bar.
</p>
<pre class="example">
[[http://www.railsonmaui.com/blog/2013/05/08/strategies-for-rails-logging-and-error-handling/][Strategies for Rails Logging and Error Handling]]
</pre>
<p>
I tried using a <code>file:../blog</code> syntax, but that either would work on the home
page or in the specific blog article, but not both. <code>http:/blog</code> links would
work in Chrome but not mobile Safari. Hopefully, one day we&#8217;ll be able to
specify relative links from blog article to blog article. <i>For now, this is a
big <b>gotcha</b>.</i>
<b>Tip</b>: You can specify relative links between org pages using the <code>.org</code> file
suffix, rather than html. The earlier example could have been specified as:
</p>
<pre class="example">
[[file:misc/telecommuting.org][Why telecommuting works and how I maximize productivity]]
</pre>
<p>
That allows you to put your cursor on the link in emacs, and hit F12 to go
the org file! I&#8217;ve got <code>F12</code> mapped to <code>org-open-at-point</code>. Awesome!
</p>
</li>
<li>Bold and italic styling (text inside of stars and /) was a bit of mystery
using the standard theme. Octopress has styling for <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code>. Org-mode spits out <code>&lt;b&gt;</code> and
<code>&lt;i&gt;</code> tags.
Add this to <code>sass/custom/_fonts.scss</code>.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">b</span> <span class="p">{</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">i</span> <span class="p">{</span> <span class="k">font-style</span><span class="o">:</span> <span class="k">italic</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Code styling (text inside of equals) <code>like this</code> did not work after a code block unless I added
the <code>div</code> tag to this line around 100 in <code>_syntax.scss</code>. You&#8217;re just adding
the <code>div</code> selector.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">Sometimes</span> <span class="nt">html</span> <span class="nt">gen</span> <span class="nt">by</span> <span class="nt">org-mode</span> <span class="nt">misses</span> <span class="nt">p</span> <span class="nt">or</span> <span class="nt">li</span> <span class="nt">tags</span><span class="o">,</span> <span class="nt">so</span> <span class="nt">add</span> <span class="nt">div</span> <span class="nt">to</span> <span class="nt">the</span> <span class="nt">mix</span>
</span><span class='line'><span class="nt">div</span><span class="o">,</span> <span class="nt">p</span><span class="o">,</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">code</span> <span class="err">{</span>
</span><span class='line'>    <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">mono</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ol>
</div>
</div>
</div>




<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Useful Scripts</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>Just configure <code>OCTO_HOME</code>
</li>
<li>Emacs tip: Visit the created file by placing cursor over file name and then hit <code>Ctrl-x, f</code>.
</li>
</ul>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">OCTO_HOME</span><span class="o">=</span>~/octopress
</span><span class='line'>ogen <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span><span class="p">;</span> rake generate<span class="p">;</span> <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>osave <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span><span class="p">;</span> git commit -am <span class="s2">&quot;Updates&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span><span class="p">;</span> <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>odeploy <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span><span class="p">;</span> osave<span class="p">;</span> rake gen_deploy<span class="p">;</span> <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this one is for orgmode only</span>
</span><span class='line'>opost<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  <span class="nv">output</span><span class="o">=</span><span class="k">$(</span>rake new_post<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_file</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$output</span> <span class="p">|</span> awk <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">base</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$new_file</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_location</span><span class="o">=</span><span class="nv">$OCTO_HOME</span>/source/org_posts/
</span><span class='line'>  mv <span class="nv">$OCTO_HOME</span>/<span class="nv">$new_file</span> <span class="nv">$new_location</span>
</span><span class='line'>  <span class="nb">echo </span>created <span class="nv">$new_location</span>/<span class="nv">$base</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>opage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  rake new_page<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Emacs setup</h2>
<div class="outline-text-2" id="text-7">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;; Justin&#39;s customized org to octopress publishing</span>
</span><span class='line'><span class="c1">;; Based on</span>
</span><span class='line'><span class="c1">;; org-mode 8.x+</span>
</span><span class='line'><span class="c1">;; http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/</span>
</span><span class='line'><span class="c1">;; https://github.com/yoshinari-nomura/org-octopress</span>
</span><span class='line'><span class="c1">;; See http://wwww.railsonmaui.com</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; the converter from org to jekyll html files</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;ox-jekyll</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; I prefer to use the plugin for source formatting. More colors!</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-jekyll-use-src-plugin</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; We&#39;re going to create the yaml-front-matter in the rake task</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-jekyll-include-yaml-front-matter</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">save-then-publish</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">org-save-all-org-buffers</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">org-publish-current-project</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-export-with-sub-superscripts</span> <span class="o">`</span><span class="nv">{}</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">my-common-octopress-settings</span>
</span><span class='line'>      <span class="o">&#39;</span><span class="p">(</span><span class="ss">:base-extension</span> <span class="s">&quot;org&quot;</span>
</span><span class='line'>                        <span class="ss">:with-toc</span> <span class="no">nil</span>
</span><span class='line'>                        <span class="ss">:with-sub-superscript</span> <span class="no">nil</span>
</span><span class='line'>                        <span class="ss">:section-numbers</span> <span class="no">nil</span>
</span><span class='line'>                        <span class="ss">:recursive</span> <span class="no">t</span>
</span><span class='line'>                        <span class="ss">:publishing-function</span> <span class="nv">org-jekyll-publish-to-html</span>
</span><span class='line'>                        <span class="ss">:headline-levels</span> <span class="mi">4</span>
</span><span class='line'>                        <span class="ss">:body-only</span> <span class="no">t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">my-static-directories</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;about&quot;</span> <span class="s">&quot;meta&quot;</span> <span class="s">&quot;tips&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">my-base-directory</span> <span class="s">&quot;~/j/railsonmaui-octopress/source&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-create-octopress-static</span> <span class="p">(</span><span class="nv">prj</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">base-dir</span> <span class="p">(</span><span class="nv">expand-file-name</span> <span class="nv">prj</span><span class="p">)))</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="nv">prj</span> <span class="o">.</span> <span class="p">(</span><span class="ss">:base-directory</span> <span class="o">,</span><span class="nv">base-dir</span>
</span><span class='line'>                              <span class="ss">:publishing-directory</span> <span class="o">,</span><span class="nv">base-dir</span>
</span><span class='line'>                              <span class="o">,@</span><span class="nv">my-common-octopress-settings</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-static-components</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">mapcar</span> <span class="ss">&#39;my-create-octopress-static</span> <span class="nv">my-static-directories</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">default-directory</span> <span class="nv">my-base-directory</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-publish-project-alist</span>
</span><span class='line'>      <span class="o">`</span><span class="p">(</span>
</span><span class='line'>        <span class="c1">;; components</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&quot;blog&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="ss">:components</span> <span class="p">(</span><span class="s">&quot;blog-org&quot;</span> <span class="s">&quot;blog-extra&quot;</span> <span class="s">&quot;about&quot;</span> <span class="s">&quot;meta&quot;</span> <span class="s">&quot;tips&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; blog articles</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&quot;blog-org&quot;</span> <span class="o">.</span>  <span class="p">(</span><span class="ss">:base-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;org_posts&quot;</span><span class="p">)</span>
</span><span class='line'>                                        <span class="ss">:publishing-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;_posts&quot;</span><span class="p">)</span>
</span><span class='line'>                                        <span class="o">,@</span><span class="nv">my-common-octopress-settings</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&quot;blog-extra&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="ss">:base-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;org_posts&quot;</span><span class="p">)</span>
</span><span class='line'>                                         <span class="ss">:publishing-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>                                         <span class="ss">:base-extension</span> <span class="s">&quot;css\\|pdf\\|png\\|jpg\\|gif\\|svg&quot;</span>
</span><span class='line'>                                         <span class="ss">:publishing-function</span> <span class="nv">org-publish-attachment</span>
</span><span class='line'>                                         <span class="ss">:recursive</span> <span class="no">t</span>
</span><span class='line'>                                         <span class="ss">:author</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; static articles</span>
</span><span class='line'>        <span class="o">,@</span><span class="p">(</span><span class="nv">my-static-components</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>




<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Deploying to Github: Directory Structure of Octopress and the master and source Git Branches</h2>
<div class="outline-text-2" id="text-8">
<p>
Github offers free hosting of both the blog deployment and source. You&#8217;re
looking at the deployment right now. You can find the source here at
<a href="https://github.com/justin808/justin808.github.io">my git repo justin808.github.io</a>. I doubt you could beat the price, performance, and
convenience. You can look inside of this repo, clone it, etc. and you have
everything that it took to make this blog.
</p>

<p>
I originally was quite confused by the concept of using two separate git
branches to make up what gets deployed on the live website versus the git
repository of my articles. Plus, there&#8217;s the issue of Octopress git repository
that you clone when starting out. Eventually, I figured out that the two branches
simply contain different files, with one containing the original Octopress
files. Here&#8217;s a few screen grabs that might clarify the situation for you.
</p>

<p>
Don&#8217;t forget that you never push to the master branch, but rather the <code>rake
deploy</code> task does it for you. Instead, you run <code>git push origin source</code> to push
the content of your blog to github.
</p>

<p>
The <code>octopress/public</code> directory corresponds to what you&#8217;ll find on the github
site for your deployment (master branch).
</p>

<p>
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/public-dir-corresponds-master-branch.png">
</p>

<p>
The octopress/.gitignore file contains entries like <code>public</code>, which essentially
keeps the <code>rake generate</code> files out of the source branch.
</p>

<p>
Here&#8217;s the github master branch right after creation. Note the correspondence
with <code>public</code>. This is what gets deployed as your blog.
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/github-master-branch.png">
</p>

<p>
Here&#8217;s the github source branch. This contains the octopress environment, as
well as your customizations and blog posts.
</p>
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/github-source-branch.png">
</div>
</div>


<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">Useful Links</h2>
<div class="outline-text-2" id="text-9">
<ol class="org-ol">
<li><a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">Getting Started with Octopress</a>: Nice overall tutorial. Very current!
March 2013.
</li>
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages">Rob Dodson on Octopress</a>: Most of the instructions I show below are from this
posting on April 30th, 2012.
</li>
<li><a href="http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/">Joel McCracken on Octopress</a>: Use Jekyll? You Really Should Be Using Octopress
</li>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on setting up a custom domain</a>
</li>
<li><a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dblock.org Article on Octopress</a>: A good explanation from Jan 17, 2012,
especially on the difference of the source and master branches.
</li>
<li><a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a>: For org-mode. See below.
</li>
<li><a href="http://hiltmon.com/blog/2013/04/17/18-months-of-octopress/">18 Months of Octopress</a>: Nice article on why Octopress was worth the switch.
</li>
<li><a href="http://odino.org/bash-aliases-for-octopress/">Shell Aliases for Octopress</a>: Save time with these shortcuts
</li>
<li><a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress package</a>: The connection between emacs/org-mode and octopress.
</li>
<li><a href="http://www.brokenlinkcheck.com/broken-links.php">Check your blog for broken links</a>: Super useful to scan for broken links.
This link is more efficient than the <a href="http://validator.w3.org/checklink">W3C Link Checker</a>
</li>
</ol>
</div>
</div>


<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">Live Reload</h2>
<div class="outline-text-2" id="text-10">
<p>
Previously, I tried to get Live Reload to work. It would be neat it worked, but
I ran into a snag. The browser gets triggered to update before the Jekyll page
is generated. I tried some various techniques for working around this, but
nothing seemed reliable. If you figure out how to fix this, please let me know.
</p>
</div>
</div>


<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">Parting words&#x2026;</h2>
<div class="outline-text-2" id="text-11">
<p>
Thanks in advance for any suggestions on this article. I hope you find it
helpful. 
</p>
</div>
</div>


<div id="discourse-comments"></div>


<script type="text/javascript">
  var discourseUrl = "http://forum.shakacode.com/",
      discourseEmbedUrl = "http://www.railsonmaui.com//blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/";
  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
      d.src = discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading Octopress]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/09/15/upgrading-octopress/"/>
    <updated>2013-09-15T22:08:00-03:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/09/15/upgrading-octopress</id>
    <content type="html"><![CDATA[<p>
One of the criticisms of Octopress is how there&#8217;s no clear separation of the static
generation engine and the content of one&#8217;s website, and thus upgrading Octopress
is difficult. I delayed upgrading due to this. However, my concerns were
unfounded, as it was very painless to upgrade Octopress.
</p>




<p>
The instructions boil down to this short help page on <a href="http://octopress.org/docs/updating/">Updating Octopress</a>:
</p>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull octopress master     <span class="c"># Get the latest Octopress</span>
</span><span class='line'>bundle install                <span class="c"># Keep gems updated</span>
</span><span class='line'>rake update_source            <span class="c"># update the template&amp;rsquo;s source</span>
</span><span class='line'>rake update_style             <span class="c"># update the template&amp;rsquo;s style</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>
The first step resulted in a few merge conflicts. I find RubyMine&#8217;s git conflict
resolution tools helpful, so I used those. Here&#8217;s a short <a href="http://youtu.be/x74Gd2lDC1A">screencast</a> (embedded
below) showing you how these tools helped with this process. Besides some minor
issues dealing with a few merge conflicts, there was nothing very interesting or
eventful about the upgrade, which means that the current process is really quite
OK.
</p>




<!-- more -->




<p>
I hope a few people find this demo of the RubyMine git conflict resolution tool
helpful. The key takeaways from this video are:
</p>




<ol class="org-ol">
<li>Merge conflicts show up as red in the list of changes.
<img src="/images/2013-09-15-upgrading-octopress/conflicts-red.jpg">
</li>

<li>Try the diff&#8217;ing buttons in the upper left to get 2 way views of
the 3 way merge.
<img src="/images/2013-09-15-upgrading-octopress/merge-window.jpg">
</li>
</ol>




<p>
3, &#8220;Yours&#8221; means your local changes, and &#8220;Theirs&#8221; means the server&#8217;s changes,
   or, in this case, the changes in the main Octopress development branch.
</p>




<p>
Did the upgrade work? You&#8217;re looking at the results of it.
</p>




<p>
It&#8217;s worth noting that I had one slight snag. When I merged sass/screen.scss, I
accidentally removed this line, which is used for the youtube plugin.
</p>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nt">custom</span><span class="o">/</span><span class="nt">rve</span><span class="k">&amp;</span><span class="nt">rdquo</span><span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>
I could have figured this out by examining the history of the file and noting
that I had added this line, rather than it being part of Octopress. So yes, it
would be bit better if there was a cleaner separation between the Octopress
code and any enhancements. However, the current mechanism works, and it&#8217;s still
thousands of times better than WordPress. 
</p>




<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/x74Gd2lDC1A "></iframe></div>
</p>


<div id="discourse-comments"></div>


<script type="text/javascript">
  var discourseUrl = "http://forum.shakacode.com/",
      discourseEmbedUrl = "http://www.railsonmaui.com//blog/2013/09/15/upgrading-octopress/";
  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
      d.src = discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress Setup with Github, Org Mode, and LiveReload]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/04/27/octopress-setup-with-github-and-org-mode/"/>
    <updated>2013-04-27T22:46:00-03:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/04/27/octopress-setup-with-github-and-org-mode</id>
    <content type="html"><![CDATA[<p>
<i>Note: This is post applies to Emacs 23 with org-mode 7.8.x. See <a href="http://www.railsonmaui.com/blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/index.html">Org-Mode Octopress Setup v2</a> for the updated version applying to Emacs 24.3 and org-mode 8.2.x</i>
</p>




<p>
WordPress seemed like a good blogging platform, but it just didn&#8217;t feel right. I
spend all my day editing text files using vim key-bindings, and I love <a href="http://orgmode.org/">Org
Mode</a> for all non-coding writing. If you don&#8217;t know Org Mode, it&#8217;s like having
Markdown mode on steroids. You can have a numbered list in Markdown, but
org-mode lets you re-order the list, and that&#8217;s just the beginning. Editing blog
documents in the WordPress editor felt almost as bad as being told to use MS
Word. I found that ergonomics of Org Mode, including all the goodness of recent
versions of <a href="http://www.gnu.org/software/emacs/">Emacs</a>, including <a href="http://www.emacswiki.org/emacs/Evil">Evil</a> (Vim emulation), just made organization of
creative thoughts so much more enjoyable.
</p>




<p>
So I bit the bullet one weekend, and dove into <a href="http://octopress.org/">Octopress</a>. You&#8217;re looking at the
results of this endeavor, including my first Octopress article, and the latest
tips on recreating this sort of blog using Octopress with Org Mode authoring,
using LiveReload, and deployed at no charge on github.com.
</p>




<p>
If you used to writing real web applications, rather than know the intricacies
of a giant monolithic blogging platform, then the <a href="http://octopress.org/docs/theme/template/">customization of Octopress</a>
seems so much more straightforward. This is so much more like the Unix
philosophy that so many of us love, which is small and modular, rather than
monolithic.
</p>




<!-- more -->




<p>
I like <a href="https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2012-04-30-custom-domain-with-octopress-and-github-pages.markdown">Rob Dodson&#8217;s summary</a> (noting Org Mode plus Emacs):
</p>


<blockquote><p><a href="http://octopress.org/">Octopress</a> is a blogging framework written by <a href="http://brandonmathis.com/">Brandon Mathis</a>
(<a href="https://twitter.com/#!/imathis">@imathis</a>) which sits on top of <a href="https://github.com/mojombo/jekyll">Jekyll</a>. Jekyll is
a static site generator, meaning there&rsquo;s no database associated with your blog. Instead of writing everything in a
WSYWIG linked to MySQL (like Wordpress or Blogger) you produce text files using Markdown which are then converted to
static HTML. There are 3 huge benefits to this approach. First, writing in
Markdown [<em>org-mode</em> for Justin] is awesome. Once you learn the
syntax it&rsquo;s incredibly fast and you don&rsquo;t have to spend time playing with a tiny little editor window just to
<s>add</s> <em>some</em> <strong>style</strong> to your posts. Second, writing in your favorite text editor is also awesome. I produce
everything in <a href="http://www.sublimetext.com/2">Sublime Text 2</a> [<em>Emacs</em> for Justin] and every day I discover new tricks to make the process
better. If you&rsquo;ve ever had to write a blog post using one of those horrible little TinyMCE editors you will appreciate
this feature. And lastly, static HTML is <em>fast</em>.</p></blockquote>

<p>
I found it totally neat that I could embed markdown inside the org-mode
document. See below for how this is done.
</p>




<p>
This article should be useful for:
</p>


<ol class="org-ol">
<li>Any interest in using org-mode to publish to Octopress including some
reasons I use Org Mode (with Emacs).
</li>
<li>Some explanation of what Octopress and git are doing.
</li>
<li>How to use LiveReload with Octopress and Org Mode.
</li>
<li>Anybody curious about how using free github pages works to host Octopress.
</li>
</ol>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Basic setup</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/">Rob Dodson on Octopress</a>: Start off with these instructions from this posting
on April 30th, 2012. There are a few differences worth noting:
<ol class="org-ol">
<li>You may wish to change the .rvmrc to a .ruby-version file
</li>
<li>Github recommends your deployment repository be named <code>yourname.github.io</code>,
not <code>yourname.github.com</code>.
</li>
<li>After you run <code>rake setup_github_pages</code> and before running <code>rake
      generate</code>, you should run <code>rake install</code>. If you forget, there&#8217;s a clear
message indicating this omission.
</li>
</ol>
</li>
<li>Customize <code>octopress/_config.yml</code>. The yaml file contains descriptions.
</li>
<li>Update the DNS to use your custom domain if you wish: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on
setting up a custom domain</a>
</li>
<li>At this point, you can create a post:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;my post name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Create a page:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span><span class="s2">&quot;my page name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Generate and deploy:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake gen_deploy
</span></code></pre></td></tr></table></div></figure>

<p>
Watch the site and regenerate when it changes:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake watch
</span></code></pre></td></tr></table></div></figure>

<p>
Preview the site in a web browser:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>

<p>
See all the available rake options:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake -T
</span></code></pre></td></tr></table></div></figure>

<p>
Save changes to source branch:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;save changes to source&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ol>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Some Perspectives on how Octopress Works</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Posts</h3>
<div class="outline-text-3" id="text-2-1">
<p>
<b>Posts</b> are created using the rake task <code>rake new_post["Post Title"]</code>. The key things about a post are:
</p>
<ol class="org-ol">
<li>File is located in =source/_posts.
</li>
<li>File has a header containing the meta-data for the post. The post URL and
date are determined by the by the <code>title</code> and <code>date</code> fields. If you want to
change the date of your post, then you change the meta-data. Changing the
file name is useful only for file navigation. Here&#8217;s a <a href="https://gist.github.com/justin808/5550381">gist for a rake task
to update the file names to match the metadata</a>.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Pages</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<b>Pages</b> are created using the rake task <code>rake new_page["Page Title"]</code>. The key
things about a page are:
</p>
<ol class="org-ol">
<li>Files are located in <code>source/page-title</code>
</li>
<li>File has a header containing the meta-data for the post.
</li>
</ol>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">POW</h2>
<div class="outline-text-2" id="text-3">
<p>
POW allows you to point your browser to <code>http://octopress.dev</code> to see your local,
unpublished Octopress website. It&#8217;s very convenient to not have to remember to
run a local server, and it works great with LiveReload. Scroll to the bottom of
this link for details on <a href="http://octopress.org/docs/blogging/">POW</a>. The alternative to running POW is to run <code>rake
preview</code> and then point your browser at <code>http://0.0.0.0:4000</code> (or whatever port
you configured).
</p>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">LiveReload</h2>
<div class="outline-text-2" id="text-4">
<p>
LiveReload is a <a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=en">Chrome browser extension</a> that will automatically refresh
the browser after you publish your file. This works with or without POW.
</p>
<ul class="org-ul">
<li><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">Install the browser extension</a> for your type of browser.
</li>
<li>Add these two entries to your <code>Gemfile</code>, in the :development group:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;guard-livereload&#39;</span>
</span></code></pre></td></tr></table></div></figure>
</li>

<li>Create a file called <code>Guardfile</code> containing something like:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">guard</span> <span class="s1">&#39;livereload&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{public/generated}</span><span class="p">)</span>
</span><span class='line'>  <span class="n">watch</span><span class="p">(</span><span class="sr">%r{public/.+\.(css|js|html)}</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</li>

<li>Start 2 shell tabs running these commands: <code>rake generate &amp;&amp; rake watch</code>
and <code>guard</code>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; rake generate <span class="o">&amp;&amp;</span> rake watch
</span></code></pre></td></tr></table></div></figure>
<p>
This screen shot shows <code>watch</code> updating the deployment files.
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/rake-generate-watch.png">
start guard LiveReload
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; guard
</span></code></pre></td></tr></table></div></figure>
<p>
This screen grab shows guard detecting the browser and telling the
browser to update.
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/guard-console.png">
</p>
</li>
</ul>

<p>
It&#8217;s neat to get LiveReload working with Octopress. However, the generation can
finish after your page does a reload, so you won&#8217;t see your latest changes. I&#8217;ll
update this blog post when I figure out a solution to that one. Until then, you
may find it more convenient to manually refresh the blog page yourself.
</p>

<p>
It&#8217;s worth noting that if you&#8217;re running any other instance of guard-
LiveReload, then one of these two copies will win and one won&#8217;t work. If you
run a rails server this way, then this can bite you. It took me a bit of time
to figure out why guard wasn&#8217;t working.
</p>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Org-Mode</h2>
<div class="outline-text-2" id="text-5">
<p>
You can skip this section if you&#8217;re not interested in org-mode. However, it&#8217;s
super cool!
</p>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">Why org-mode for blog publishing?</h3>
<div class="outline-text-3" id="text-5-1">
<p>
<a href="http://orgmode.org/">Org-mode</a> offers quite a bit more than plain markdown. It&#8217;s quite the <b>hacker&#8217;s
delight</b> for note taking and authoring of blog articles. Down below I list a few
reasons why org-mode. Here&#8217;s a few org-mode features I love (Some are Emacs
ones):
</p>
<ol class="org-ol">
<li>All headers and list items can be reordered with minimal keystrokes (think
super powerful outliner).
</li>
<li>Numbered lists.
</li>
<li>Editable tables in text editor, with movable columns, movable rows.
</li>
<li>Ergonomics of insertion of URLs and images.
</li>
<li>Includes the basics of markdown, such as source code blocks and much more.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">Org-mode Integration</h3>
<div class="outline-text-3" id="text-5-2">
<p>
I found a plugin that automates the process of converting an org-mode document
(<code>.org</code> file) in <code>source/org_posts</code> into a <code>.markdown</code> document in
<code>source/_posts</code>. Once the markdown document is saved in _posts, the <code>rake
watch</code> task picks up the change and deploys the file, and LiveReload can then
automatically update your web browser. <b>Neat!</b>
</p>

<p>
Here are the basic steps:
</p>
<ol class="org-ol">
<li>Follow the instructions here: <a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a>
</li>
<li>At the time of this article, April 27, there&#8217;s a bug with the latest
org-mode. <a href="https://github.com/craftkiller/orgmode-octopress/issues/3">I posted a workaround.</a> By the time you read this, you probably
won&#8217;t need that tip.
</li>
<li>You can embed Markdown (or other Octopress/Jekyll directives) by embedding
inside of a <code>#+begin_html</code> and <code>#+end_html</code> block.
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/quoting-markdown-in-org-mode.png">
</li>
<li><del>Images work fine.</del> Well, almost fine. The big gotcha is that the standard
inclusion of images in org-mode results in broken paths at deployment. The
workaround is to embed the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress syntax for an image</a>, and to place the
images under source/images. Note, you&#8217;ll want to be sure to use an absolute
path, or else your article might look OK on the home page, but might now work
in the postings directory. If I&#8217;m creating a document with many images, I&#8217;ll
group the images for that document in a sub-directory of images named like
the document. This is how it should look. The trick is to place the
octopress <code>img</code> directive within a HTML begin/end block.

<p>
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/org-mode-images.png">
</p>
</li>
<li><b>Links</b>: Links for relative pages are simple.
<pre class="example">
[[file:telecommuting.html][Why telecommuting works and how I maximize productivity]]
</pre>
<p>
Links from a <i>page</i> to a <i>post</i> can use a relative link like this:
</p>
<pre class="example">
[[file:../blog/2013/04/27/octopress-setup-with-github-and-org-mode/index.html][here]]
</pre>
<p>
<b>However</b>, links from posts to other posts require an absolute URL. The big
gotcha is blog posts due to the nested URL structure that does not map to the
where you&#8217;re putting your org-posts. To avoid trouble, you need to follow a
format as this example shows. It&#8217;s easiest to copy the URL from the browser
address bar.
</p>
<pre class="example">
[[http://www.railsonmaui.com/blog/2013/05/08/strategies-for-rails-logging-and-error-handling/][Strategies for Rails Logging and Error Handling]]
</pre>
<p>
I tried using a <code>file:../blog</code> syntax, but that either would work on the home
page or in the specific blog article, but not both. <code>http:/blog</code> links would
work in Chrome but not mobile Safari. Markdown to get parsed by Jekyll does
not work if the link is within a block level html tag (i.e., a paragraph).
Hopefully, one day we&#8217;ll be able to specify relative links from blog article
to blog article.
</p>
</li>
<li>Bold styling (text inside of stars) was a bit of mystery using the standard theme. I had to add
this line to _typography.scss:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">b</span> <span class="p">{</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
<p>
Code styling (text inside of equals) <code>like this</code> did not work after a code block unless I added
the <code>div</code> tag to this line around 100 in <code>_syntax.scss</code>
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">Sometimes</span> <span class="nt">html</span> <span class="nt">gen</span> <span class="nt">by</span> <span class="nt">org-mode</span> <span class="nt">misses</span> <span class="nt">p</span> <span class="nt">or</span> <span class="nt">li</span> <span class="nt">tags</span>
</span><span class='line'><span class="nt">div</span><span class="o">,</span> <span class="nt">p</span><span class="o">,</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">code</span> <span class="err">{</span>
</span><span class='line'>    <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">mono</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ol>
</div>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Useful Scripts</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>Just configure <code>OCTO_HOME</code>
</li>
<li>Emacs tip: Visit the created file by placing cursor over file name and then hit <code>Ctrl-x, f</code>.
</li>
</ul>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">OCTO_HOME</span><span class="o">=</span>~/octopress
</span><span class='line'>ogen <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span><span class="p">;</span> rake generate<span class="p">;</span> <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>osave <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span><span class="p">;</span> git commit -am <span class="s2">&quot;Updates&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span><span class="p">;</span> <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>odeploy <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span><span class="p">;</span> osave<span class="p">;</span> rake gen_deploy<span class="p">;</span> <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this one is for orgmode only</span>
</span><span class='line'>opost<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  <span class="nv">output</span><span class="o">=</span><span class="k">$(</span>rake new_post<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_file</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$output</span> <span class="p">|</span> awk <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">base</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$new_file</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_location</span><span class="o">=</span><span class="nv">$OCTO_HOME</span>/source/org_posts/
</span><span class='line'>  mv <span class="nv">$OCTO_HOME</span>/<span class="nv">$new_file</span> <span class="nv">$new_location</span>
</span><span class='line'>  <span class="nb">echo </span>created <span class="nv">$new_location</span>/<span class="nv">$base</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>opage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  rake new_page<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Deploying to Github: Directory Structure of Octopress and the master and source Git Branches</h2>
<div class="outline-text-2" id="text-7">
<p>
Github offers free hosting of both the blog deployment and source. You&#8217;re
looking at the deployment right now. You can find the source here at
<a href="https://github.com/justin808/justin808.github.io">my git repo justin808.github.io</a>. I doubt you could beat the price, performance, and
convenience. You can look inside of this repo, clone it, etc. and you have
everything that it took to make this blog.
</p>

<p>
I originally was quite confused by the concept of using two separate git
branches to make up what gets deployed on the live website versus the git
repository of my articles. Plus, there&#8217;s the issue of Octopress git repository
that you clone when starting out. Eventually, I figured out that the two branches
simply contain different files, with one containing the original Octopress
files. Here&#8217;s a few screen grabs that might clarify the situation for you.
</p>

<p>
Don&#8217;t forget that you never push to the master branch, but rather the <code>rake
deploy</code> task does it for you. Instead, you run <code>git push origin source</code> to push
the content of your blog to github.
</p>

<p>
The <code>octopress/public</code> directory corresponds to what you&#8217;ll find on the github
site for your deployment (master branch).
</p>

<p>
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/public-dir-corresponds-master-branch.png">
</p>

<p>
The octopress/.gitignore file contains entries like <code>public</code>, which essentially
keeps the <code>rake generate</code> files out of the source branch.
</p>

<p>
Here&#8217;s the github master branch right after creation. Note the correspondence
with <code>public</code>. This is what gets deployed as your blog.
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/github-master-branch.png">
</p>

<p>
Here&#8217;s the github source branch. This contains the octopress environment, as
well as your customizations and blog posts.
</p>
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/github-source-branch.png">
</div>
</div>


<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Useful Links</h2>
<div class="outline-text-2" id="text-8">
<ol class="org-ol">
<li><a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">Getting Started with Octopress</a>: Nice overall tutorial. Very current!
March 2013.
</li>
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages">Rob Dodson on Octopress</a>: Most of the instructions I show below are from this
posting on April 30th, 2012.
</li>
<li><a href="http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/">Joel McCracken on Octopress</a>: Use Jekyll? You Really Should Be Using Octopress
</li>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on setting up a custom domain</a>
</li>
<li><a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dblock.org Article on Octopress</a>: A good explanation from Jan 17, 2012,
especially on the difference of the source and master branches.
</li>
<li><a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a>: For org-mode. See below.
</li>
<li><a href="http://hiltmon.com/blog/2013/04/17/18-months-of-octopress/">18 Months of Octopress</a>: Nice article on why Octopress was worth the switch.
</li>
<li><a href="http://odino.org/bash-aliases-for-octopress/">Shell Aliases for Octopress</a>: Save time with these shortcuts
</li>
</ol>
</div>
</div>




<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">Parting words&#x2026;</h2>
<div class="outline-text-2" id="text-9">
<p>
Thanks in advance for any suggestions on this article. I hope you find it
helpful. Check me out on Twitter: <a href="https://twitter.com/railsonmaui">@RailsOnMaui</a>.
</p>
</div>
</div>


<div id="discourse-comments"></div>


<script type="text/javascript">
  var discourseUrl = "http://forum.shakacode.com/",
      discourseEmbedUrl = "http://www.railsonmaui.com//blog/2013/04/27/octopress-setup-with-github-and-org-mode/";
  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
      d.src = discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>

]]></content>
  </entry>
  
</feed>
