<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tmux | Rails on Maui]]></title>
  <link href="http://www.railsonmaui.com//blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://www.railsonmaui.com//"/>
  <updated>2020-04-23T15:56:45-03:00</updated>
  <id>http://www.railsonmaui.com//</id>
  <author>
    <name><![CDATA[Justin Gordon]]></name>
    <email><![CDATA[justin@railsonmaui.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rocking with tmux, tmuxinator, Guard, Zeus, and iTerm2 for Rails Development]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/03/12/rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/"/>
    <updated>2014-03-12T04:01:13-03:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/03/12/rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development</id>
    <content type="html"><![CDATA[<p>
What&#8217;s the most effective way to:
</p>


<ol class="org-ol">
<li>Start several different processes for Rails, such as Zeus, Rails server, rspec,
resque, and the scheduler.
</li>
<li>Have the output for each process in a separate tab.
</li>
<li>Not have the process pause when you scroll the output, as happens in tmux.
</li>
</ol>




<p>
Here&#8217;s a short demo of using tmuxinator to get a project running in several
iterm2 tabs:
</p>




<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/15Bxhu6-Xjc "></iframe></div>
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Why Guard?</h2>
<div class="outline-text-2" id="text-1">
<p>
I use <a href="https://github.com/guard/guard">Guard</a> for:
</p>
<ol class="org-ol">
<li>Automatically running rspec tests based on changes in either tests or source
files. Together with <a href="https://github.com/burke/zeus">Zeus</a>, I haven&#8217;t found a faster way to get immediate
feedback from tests. <i>Pro tip: Learn how to use <code>:focus</code> with your specs to configure exactly what tests to have guard run.</i>
</li>
<li>Automatically restarting the server when needed. For example, if you change
gems or routes, you need to restart the server.
</li>
</ol>

<p>
While I love running Guard with Zeus, <a href="https://github.com/rails/spring">Spring</a> is the default in Rails 4.1, so
I&#8217;ll probably give that a try in the near future.
</p>

<!-- more -->
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Why Tmuxinator and Tmux?</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://github.com/tmuxinator/tmuxinator">Tmuxinator</a> is awesome for configuring the layout of several processes.
</p>

<p>
Here&#8217;s a sample tmuxinator file.
</p>

<p>
<div><script src='https://gist.github.com/9502375.js'></script>
<noscript><pre><code># First brew install tmux, gem install tmuxinator, and download item2
# Copy this file here: ~/.tmuxinator/my_project.yml
# Modify the paths (replace ~/my_project with your directory)
# Invoke with
#   mux project
# Then hit &#39;Ctrl-a d&#39; to detach
# Then run &#39;tmux -CC attach&#39;
# Make sure that option for iterm2 is General --&gt; tmux --&gt; When attaching, open unrecognized windows in Tabs
# Also, check option &quot;Automatically hide the tmux client session after connecting&quot;
# alias beg=&#39;bundle exec guard&#39;
# define guard groups for spec, server, worker
name: project
pre_window: cd ~/my_project
root: ~/my_project
windows:
  - zeus: zeus start
  - spec: beg -g spec
  - server: beg -g server
  - worker:
      layout: main-horizontal
      panes:
        - beg -g worker
        - scheduler</code></pre></noscript></div>

</p>

<p>
When I run the command
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mux my_project
</span></code></pre></td></tr></table></div></figure>

<p>
And then I see the following. This is way easier than opening up tabs in iTerm2
and running commands every time.
</p>

<p>
<img src="/images/2014-03-11-rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/tmuxinator-start.png">
</p>

<p>
The main problem with this setup is that if you scroll a window backwards (using
the tmux keyboard bindings), and you don&#8217;t un-scroll, then the process pauses,
such as the Rails server. <b>That&#8217;s super annoying</b>. Often I&#8217;m running specs, and
I want to scroll back to see a stack trace, but that prevents the continuation
of the test run! Here&#8217;s a <a href="http://stackoverflow.com/questions/13924365/rails-freezes-when-searching-through-tmux-output-buffer">short discussion of the issue</a>.
</p>

<!-- more -->
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">iTerm2 with tmux to the Rescue!</h2>
<div class="outline-text-2" id="text-3">
<p>
iTerm2 has <a href="https://code.google.com/p/iterm2/wiki/TmuxIntegration">wonderful tmux integration</a>. Here&#8217;s the steps I take:
</p>
<ol class="org-ol">
<li>Be sure have the latest versions of tmux, tmuxinator and iTerm2. As of this
article, I&#8217;m using: tmux: 1.9a, tmuxinator: 0.6.7, iTerm2: Build
1.0.0.20140112.
</li>
<li>Configure your Tmux to open tabs rather than windows. This is key to getting
the iTerm2 version to look like your original tmux session.
</li>
</ol>

<p>
<img src="/images/2014-03-11-rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/tmuxinator-configuration.png">
</p>

<p>
Once you have the setup done, this is how I start my iTerm2-tmuxinator session:
</p>

<ol class="org-ol">
<li>Start tmuxinator with command <code>mux my_project</code>
</li>
<li>Hit <code>ctrl-a, d</code> to detach the tmux process.
</li>
<li>Run command =tmux -CC attach&#8221;
</li>
</ol>

<p>
Here&#8217;s how it will look:
</p>

<p>
<img src="/images/2014-03-11-rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/tmuxinator-iterm2-started.png">
</p>

<p>
If you want to kill the session, you can run this command:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmux <span class="nb">kill</span>-session -t my_project
</span></code></pre></td></tr></table></div></figure>

<p>
However, that sometimes does not kill all the processes. I often use these two
zsh scripts to ensure that everything is killed. It&#8217;s super important to kill
Zeus before running db migrations or gem updates.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pgr<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> x in rails phantomjs zeus<span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    pgrep -fl <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>pgk<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span> x in rails phantomjs zeus<span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    pkill -fl <span class="nv">$x</span><span class="p">;</span>
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Why Tmuxinator/tmux and not Foreman?</h2>
<div class="outline-text-2" id="text-4">
<p>
I use <a href="https://github.com/ddollar/foreman">Foreman</a> with Heroku and for running my rails server in production mode.
However, I prefer having different tabs provide console output for each of the
processes, rather than having all the console output blended together as Foreman
does. I&#8217;m also not sure if Foreman integrates with Guard.
</p>
</div>
</div>


<div id="discourse-comments"></div>


<script type="text/javascript">
  var discourseUrl = "http://forum.shakacode.com/",
      discourseEmbedUrl = "http://www.railsonmaui.com//blog/2014/03/12/rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/";
  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
      d.src = discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script>

]]></content>
  </entry>
  
</feed>
