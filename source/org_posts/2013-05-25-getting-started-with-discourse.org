#+BEGIN_HTML
---
layout: post
title: "Getting Started with Discourse"
date: 2013-05-25 13:24
comments: true
redirect_from: /blog/2013/05/25/getting-started-wtih-discourse/index.html
categories: [emberjs]
keywords: emberjs discourse.org
description: A quick guide to installing discourse to see a production quality rails project on github.
canonical: https://www.shakacode.com/blog/getting-started-with-discourse/
---
#+END_HTML

Looking for a great open source example of a /production quality/
rails, emberjs, and single-page-application project? Check out [[https://github.com/discourse/discourse][Discourse]].
#+begin_quote
Discourse is the 100% open source, next-generation discussion platform built for the next decade of the Internet.
#+end_quote
Here's a great example of the Discourse code in action: [[http://meta.discourse.org/t/is-it-better-for-discourse-to-use-javascript-or-coffeescript/3153][Is it better for
Discourse to use JavaScript or CoffeeScript?]]

#+begin_html
<!-- more -->
#+end_html

* Production Quality, not a Tutorial
Note, this is an example of a /production quality/ application, rather than a
useful tutorial sample application. What's the difference? The Discourse
codebase is the real deal, including all the gory details, such as performance
optimizations. If you want a superb sample rails application, check out [[https://github.com/railstutorial/sample_app_2nd_ed][Rails
Tutorial, 2nd Ediition]] and read the book [[http://ruby.railstutorial.org/ruby-on-rails-tutorial-book][Ruby on Rails Tutorial, Learn Web
Development with Rails, Michael Hartl]]. There's even an interesting discussion on
the Discourse blog about [[http://blog.discourse.org/2013/04/discourse-as-your-first-rails-app/][Discourse as Your First Rails App]], which it shouldn't be.

That being said, the Discourse code base is probably as good as or, in many
cases, better than what you'll find in many software-as-a-service companies.
It's no secret that public scrutiny of popular open source code really raises
the bar on quality. Consequently, if you're a serious and experienced Rails
developer, it's worth your time to install the source of discourse and explore
and run it. I just did that and I'm impressed.

* Why Explore Discourse's Source?
1. Example of EmberJs Single-Page-Application.
2. Design decisions are discussed at [[http://meta.discourse.org/][meta.discourse.org]], such as [[http://meta.discourse.org/t/is-it-better-for-discourse-to-use-javascript-or-coffeescript/3153][Is it better
   for Discourse to use JavaScript or CoffeeScript?]]
3. Solid project, from code quality to organization.
4. Co-Founded by Jeff Atwood, who created [[http://stackoverflow.com/][Stack Overflow]]. Jeff wrote a article
   introducing the discourse project: [[http://www.codinghorror.com/blog/2013/02/civilized-discourse-construction-kit.html][Civilized Discourse Construction Kit]].

* Setup Tips
Basically, there's a few dependencies to install, some of which you probably already
have installed, such as Postgres and Redis. The main gotcha I faced was to make
sure that you run the postgres instructions for [[https://github.com/discourse/discourse/blob/master/docs/DEVELOPMENT-OSX-NATIVE.md][creating the development
database]], rather than using the rake task. Then you can install the seed data:
#+BEGIN_SRC bash
psql -d discourse_development < pg_dumps/development-image.sql
#+END_SRC


The rake task to do =rake db:seed_fu= does not install the sample data, but
rather some tiny bit of "seed" data (like post action types).

Once you have the test data installed, then run these commands.
#+BEGIN_SRC bash
bundle install # Yes, this DOES take a while. No, it's not really cloning all of rubygems :-)
rake db:migrate
rake db:test:prepare
rake db:seed_fu
bundle exec rspec # All specs should pass
#+END_SRC

You should have installed [[http://mailcatcher.me/][MailCatcher]], so that you don't have to configure any
smtp server. Then you just have to visit http://localhost:1080 to see the mail
messages that Discourse sends.

Then to run the Discourse application (assuming postgres and redis are running)
open up two tabs. Cd each to the disource directory. 
#+BEGIN_SRC bash
bundle exec rails server
#+END_SRC

#+BEGIN_SRC bash
bundle exec sidekiq
#+END_SRC

#+BEGIN_SRC bash
bundle exec clockwork config/clock.rb
#+END_SRC


Or, install foreman (=gem install foreman=) and run (runs the =Procfile=).

#+BEGIN_SRC bash
export PORT=3000
export RAILS_ENV=development
foreman start
#+END_SRC

If you got this working, you'll see this:
{% img /images/2013-05-25-getting-started-wtih-discourse/discourse-installed.png %}


* Links
+ [[https://github.com/discourse/discourse][Discourse on Github]]
+ [[https://github.com/discourse/discourse/blob/master/docs/DEVELOPER-ADVANCED.md][Discourse Advanced Developer Guide]]
+ [[https://github.com/discourse/discourse/blob/master/docs/DEVELOPMENT-OSX-NATIVE.md][Developing under OS X Without Vagrant]] 
+ Overview: [[http://www.discourse.org/][www.discourse.org]]
+ Discourse discussing itself: [[http://meta.discourse.org/][meta.discourse.org]]


















